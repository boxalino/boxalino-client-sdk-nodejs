export declare class BxRequest {
    protected language: string;
    protected groupBy: string;
    protected choiceId: string;
    protected min: number;
    protected max: number;
    protected withRelaxation: boolean;
    protected indexId: string;
    protected requestMap: any;
    protected returnFields: any;
    protected offset: number;
    protected queryText: string;
    protected bxFacets: any;
    protected bxSortFields: any;
    protected bxFilters: any;
    protected orFilters: boolean;
    protected hitsGroupsAsHits: any;
    protected groupFacets: any;
    protected requestContextParameters: any;
    protected contextItems: any;
    constructor(language: string, choiceId: string, max?: number, min?: number);
    getWithRelaxation(): boolean;
    setWithRelaxation(withRelaxation: boolean): void;
    getReturnFields(): any;
    setReturnFields(returnFields: any): void;
    getOffset(): number;
    setOffset(offset: number): void;
    getQuerytext(): string;
    setQuerytext(queryText: string): void;
    getFacets(): any;
    setFacets(bxFacets: any): void;
    getSortFields(): any;
    setSortFields(bxSortFields: any): void;
    getFilters(): any;
    setFilters(bxFilters: any): void;
    addFilter(bxFilter: any): void;
    getOrFilters(): boolean;
    setOrFilters(orFilters: any): void;
    addSortField(field: string, reverse?: boolean): void;
    getChoiceId(): string;
    setChoiceId(choiceId: any): void;
    getMax(): number;
    setMax(max: number): void;
    getMin(): number;
    setMin(min: number): void;
    getIndexId(): string;
    setIndexId(indexId: string): void;
    setDefaultIndexId(indexId: string): void;
    setDefaultRequestMap(requestMap: any): void;
    getLanguage(): string;
    setLanguage(language: string): void;
    getGroupBy(): string;
    setGroupBy(groupBy: string): void;
    setHitsGroupsAsHits(groupsAsHits: any): void;
    setGroupFacets(groupFacets: any): void;
    getSimpleSearchQuery(): any;
    setProductContext(fieldName: string, contextItemId: string, role?: string, relatedProducts?: any, relatedProductField?: string): void;
    setBasketProductWithPrices(fieldName: string, basketContent: any, role?: string, subRole?: string, relatedProducts?: any, relatedProductField?: string): void;
    addRelatedProducts(relatedProducts: any, relatedProductField?: string): void;
    getContextItems(): any;
    getRequestContextParameters(): any;
    retrieveHitFieldValues(item: any, field: string, items: any, fields: any): any[];
}
