import { BxBatchResponse } from './BxBatchResponse';
export declare class BxBatchClient {
    private account;
    private password;
    private domain;
    private isDev;
    protected apiKey: any;
    protected apiSecret: any;
    private host;
    private uri;
    protected schema: string;
    protected batchSize: number;
    protected notifications: any;
    protected requestContextParameters: any;
    protected batchChooseRequests: any;
    protected batchChooseRequest: any;
    private port;
    protected isTest: any;
    protected batchChooseResponse: any;
    private p13n_username;
    private p13n_password;
    protected transport: any;
    protected batchRequest: any;
    protected _timeout: any;
    constructor(account: any, password: any, domain: any, isDev?: boolean, apiKey?: any, apiSecret?: any);
    setRequest(request: any): void;
    getBatchChooseResponse(): Promise<BxBatchResponse>;
    batchChoose(): Promise<any>;
    getThriftBatchChoiceRequest(): any;
    addBatchChooseRequest(request: any): void;
    getBatchChooseRequest(request: any, profileIds?: any): any;
    p13nBatch(batchChoiceRequest: any): Promise<any>;
    getP13n(): any;
    getUserRecord(): any;
    resetBatchRequests(): void;
    flushResponses(): void;
    private throwCorrectP13nException;
    addRequestContextParameter(name: any, values: any): void;
    resetRequestContextParameter(): void;
    setTimeout(timeout: any): void;
    setHost(host: any): void;
    setTestMode(isTest: any): void;
    setApiKey(apiKey: any): void;
    setApiSecret(apiSecret: any): void;
    getAccount(checkDev?: boolean): string;
    getUsername(): string;
    getPassword(): string;
    getApiKey(): any;
    getApiSecret(): any;
    addNotification(type: any, notification: any): void;
}
