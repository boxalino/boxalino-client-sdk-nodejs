//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./p13n_types');
//HELPER FUNCTIONS AND STRUCTURES

var P13nService_choose_args = function(args) {
  this.choiceRequest = null;
  if (args) {
    if (args.choiceRequest !== undefined && args.choiceRequest !== null) {
      this.choiceRequest = new ttypes.ChoiceRequest(args.choiceRequest);
    }
  }
};
P13nService_choose_args.prototype = {};
P13nService_choose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.choiceRequest = new ttypes.ChoiceRequest();
        this.choiceRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_choose_args.prototype.write = function(output) {
  output.writeStructBegin('P13nService_choose_args');
  if (this.choiceRequest !== null && this.choiceRequest !== undefined) {
    output.writeFieldBegin('choiceRequest', Thrift.Type.STRUCT, -1);
    this.choiceRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_choose_result = function(args) {
  this.success = null;
  this.p13nServiceException = null;
  if (args instanceof ttypes.P13nServiceException) {
    this.p13nServiceException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChoiceResponse(args.success);
    }
    if (args.p13nServiceException !== undefined && args.p13nServiceException !== null) {
      this.p13nServiceException = args.p13nServiceException;
    }
  }
};
P13nService_choose_result.prototype = {};
P13nService_choose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChoiceResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p13nServiceException = new ttypes.P13nServiceException();
        this.p13nServiceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_choose_result.prototype.write = function(output) {
  output.writeStructBegin('P13nService_choose_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p13nServiceException !== null && this.p13nServiceException !== undefined) {
    output.writeFieldBegin('p13nServiceException', Thrift.Type.STRUCT, 1);
    this.p13nServiceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_chooseAll_args = function(args) {
  this.bundle = null;
  if (args) {
    if (args.bundle !== undefined && args.bundle !== null) {
      this.bundle = new ttypes.ChoiceRequestBundle(args.bundle);
    }
  }
};
P13nService_chooseAll_args.prototype = {};
P13nService_chooseAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bundle = new ttypes.ChoiceRequestBundle();
        this.bundle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_chooseAll_args.prototype.write = function(output) {
  output.writeStructBegin('P13nService_chooseAll_args');
  if (this.bundle !== null && this.bundle !== undefined) {
    output.writeFieldBegin('bundle', Thrift.Type.STRUCT, -1);
    this.bundle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_chooseAll_result = function(args) {
  this.success = null;
  this.p13nServiceException = null;
  if (args instanceof ttypes.P13nServiceException) {
    this.p13nServiceException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChoiceResponseBundle(args.success);
    }
    if (args.p13nServiceException !== undefined && args.p13nServiceException !== null) {
      this.p13nServiceException = args.p13nServiceException;
    }
  }
};
P13nService_chooseAll_result.prototype = {};
P13nService_chooseAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChoiceResponseBundle();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p13nServiceException = new ttypes.P13nServiceException();
        this.p13nServiceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_chooseAll_result.prototype.write = function(output) {
  output.writeStructBegin('P13nService_chooseAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p13nServiceException !== null && this.p13nServiceException !== undefined) {
    output.writeFieldBegin('p13nServiceException', Thrift.Type.STRUCT, 1);
    this.p13nServiceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_batchChoose_args = function(args) {
  this.batchChoiceRequest = null;
  if (args) {
    if (args.batchChoiceRequest !== undefined && args.batchChoiceRequest !== null) {
      this.batchChoiceRequest = new ttypes.BatchChoiceRequest(args.batchChoiceRequest);
    }
  }
};
P13nService_batchChoose_args.prototype = {};
P13nService_batchChoose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.batchChoiceRequest = new ttypes.BatchChoiceRequest();
        this.batchChoiceRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_batchChoose_args.prototype.write = function(output) {
  output.writeStructBegin('P13nService_batchChoose_args');
  if (this.batchChoiceRequest !== null && this.batchChoiceRequest !== undefined) {
    output.writeFieldBegin('batchChoiceRequest', Thrift.Type.STRUCT, -1);
    this.batchChoiceRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_batchChoose_result = function(args) {
  this.success = null;
  this.p13nServiceException = null;
  if (args instanceof ttypes.P13nServiceException) {
    this.p13nServiceException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BatchChoiceResponse(args.success);
    }
    if (args.p13nServiceException !== undefined && args.p13nServiceException !== null) {
      this.p13nServiceException = args.p13nServiceException;
    }
  }
};
P13nService_batchChoose_result.prototype = {};
P13nService_batchChoose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BatchChoiceResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p13nServiceException = new ttypes.P13nServiceException();
        this.p13nServiceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_batchChoose_result.prototype.write = function(output) {
  output.writeStructBegin('P13nService_batchChoose_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p13nServiceException !== null && this.p13nServiceException !== undefined) {
    output.writeFieldBegin('p13nServiceException', Thrift.Type.STRUCT, 1);
    this.p13nServiceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_autocomplete_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AutocompleteRequest(args.request);
    }
  }
};
P13nService_autocomplete_args.prototype = {};
P13nService_autocomplete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AutocompleteRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_autocomplete_args.prototype.write = function(output) {
  output.writeStructBegin('P13nService_autocomplete_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, -1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_autocomplete_result = function(args) {
  this.success = null;
  this.p13nServiceException = null;
  if (args instanceof ttypes.P13nServiceException) {
    this.p13nServiceException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AutocompleteResponse(args.success);
    }
    if (args.p13nServiceException !== undefined && args.p13nServiceException !== null) {
      this.p13nServiceException = args.p13nServiceException;
    }
  }
};
P13nService_autocomplete_result.prototype = {};
P13nService_autocomplete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AutocompleteResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p13nServiceException = new ttypes.P13nServiceException();
        this.p13nServiceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_autocomplete_result.prototype.write = function(output) {
  output.writeStructBegin('P13nService_autocomplete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p13nServiceException !== null && this.p13nServiceException !== undefined) {
    output.writeFieldBegin('p13nServiceException', Thrift.Type.STRUCT, 1);
    this.p13nServiceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_autocompleteAll_args = function(args) {
  this.bundle = null;
  if (args) {
    if (args.bundle !== undefined && args.bundle !== null) {
      this.bundle = new ttypes.AutocompleteRequestBundle(args.bundle);
    }
  }
};
P13nService_autocompleteAll_args.prototype = {};
P13nService_autocompleteAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bundle = new ttypes.AutocompleteRequestBundle();
        this.bundle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_autocompleteAll_args.prototype.write = function(output) {
  output.writeStructBegin('P13nService_autocompleteAll_args');
  if (this.bundle !== null && this.bundle !== undefined) {
    output.writeFieldBegin('bundle', Thrift.Type.STRUCT, -1);
    this.bundle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_autocompleteAll_result = function(args) {
  this.success = null;
  this.p13nServiceException = null;
  if (args instanceof ttypes.P13nServiceException) {
    this.p13nServiceException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AutocompleteResponseBundle(args.success);
    }
    if (args.p13nServiceException !== undefined && args.p13nServiceException !== null) {
      this.p13nServiceException = args.p13nServiceException;
    }
  }
};
P13nService_autocompleteAll_result.prototype = {};
P13nService_autocompleteAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AutocompleteResponseBundle();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p13nServiceException = new ttypes.P13nServiceException();
        this.p13nServiceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_autocompleteAll_result.prototype.write = function(output) {
  output.writeStructBegin('P13nService_autocompleteAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p13nServiceException !== null && this.p13nServiceException !== undefined) {
    output.writeFieldBegin('p13nServiceException', Thrift.Type.STRUCT, 1);
    this.p13nServiceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_updateChoice_args = function(args) {
  this.choiceUpdateRequest = null;
  if (args) {
    if (args.choiceUpdateRequest !== undefined && args.choiceUpdateRequest !== null) {
      this.choiceUpdateRequest = new ttypes.ChoiceUpdateRequest(args.choiceUpdateRequest);
    }
  }
};
P13nService_updateChoice_args.prototype = {};
P13nService_updateChoice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.STRUCT) {
        this.choiceUpdateRequest = new ttypes.ChoiceUpdateRequest();
        this.choiceUpdateRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_updateChoice_args.prototype.write = function(output) {
  output.writeStructBegin('P13nService_updateChoice_args');
  if (this.choiceUpdateRequest !== null && this.choiceUpdateRequest !== undefined) {
    output.writeFieldBegin('choiceUpdateRequest', Thrift.Type.STRUCT, -1);
    this.choiceUpdateRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nService_updateChoice_result = function(args) {
  this.success = null;
  this.p13nServiceException = null;
  if (args instanceof ttypes.P13nServiceException) {
    this.p13nServiceException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChoiceUpdateResponse(args.success);
    }
    if (args.p13nServiceException !== undefined && args.p13nServiceException !== null) {
      this.p13nServiceException = args.p13nServiceException;
    }
  }
};
P13nService_updateChoice_result.prototype = {};
P13nService_updateChoice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChoiceUpdateResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p13nServiceException = new ttypes.P13nServiceException();
        this.p13nServiceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nService_updateChoice_result.prototype.write = function(output) {
  output.writeStructBegin('P13nService_updateChoice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p13nServiceException !== null && this.p13nServiceException !== undefined) {
    output.writeFieldBegin('p13nServiceException', Thrift.Type.STRUCT, 1);
    this.p13nServiceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
P13nServiceClient.prototype = {};
P13nServiceClient.prototype.seqid = function() { return this._seqid; };
P13nServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
P13nServiceClient.prototype.choose = function(choiceRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_choose(choiceRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_choose(choiceRequest);
  }
};

P13nServiceClient.prototype.send_choose = function(choiceRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('choose', Thrift.MessageType.CALL, this.seqid());
  var args = new P13nService_choose_args();
  args.choiceRequest = choiceRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

P13nServiceClient.prototype.recv_choose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new P13nService_choose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p13nServiceException) {
    return callback(result.p13nServiceException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('choose failed: unknown result');
};
P13nServiceClient.prototype.chooseAll = function(bundle, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_chooseAll(bundle);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_chooseAll(bundle);
  }
};

P13nServiceClient.prototype.send_chooseAll = function(bundle) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chooseAll', Thrift.MessageType.CALL, this.seqid());
  var args = new P13nService_chooseAll_args();
  args.bundle = bundle;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

P13nServiceClient.prototype.recv_chooseAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new P13nService_chooseAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p13nServiceException) {
    return callback(result.p13nServiceException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('chooseAll failed: unknown result');
};
P13nServiceClient.prototype.batchChoose = function(batchChoiceRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_batchChoose(batchChoiceRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_batchChoose(batchChoiceRequest);
  }
};

P13nServiceClient.prototype.send_batchChoose = function(batchChoiceRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('batchChoose', Thrift.MessageType.CALL, this.seqid());
  var args = new P13nService_batchChoose_args();
  args.batchChoiceRequest = batchChoiceRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

P13nServiceClient.prototype.recv_batchChoose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new P13nService_batchChoose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p13nServiceException) {
    return callback(result.p13nServiceException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('batchChoose failed: unknown result');
};
P13nServiceClient.prototype.autocomplete = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_autocomplete(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_autocomplete(request);
  }
};

P13nServiceClient.prototype.send_autocomplete = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('autocomplete', Thrift.MessageType.CALL, this.seqid());
  var args = new P13nService_autocomplete_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

P13nServiceClient.prototype.recv_autocomplete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new P13nService_autocomplete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p13nServiceException) {
    return callback(result.p13nServiceException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('autocomplete failed: unknown result');
};
P13nServiceClient.prototype.autocompleteAll = function(bundle, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_autocompleteAll(bundle);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_autocompleteAll(bundle);
  }
};

P13nServiceClient.prototype.send_autocompleteAll = function(bundle) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('autocompleteAll', Thrift.MessageType.CALL, this.seqid());
  var args = new P13nService_autocompleteAll_args();
  args.bundle = bundle;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

P13nServiceClient.prototype.recv_autocompleteAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new P13nService_autocompleteAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p13nServiceException) {
    return callback(result.p13nServiceException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('autocompleteAll failed: unknown result');
};
P13nServiceClient.prototype.updateChoice = function(choiceUpdateRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChoice(choiceUpdateRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChoice(choiceUpdateRequest);
  }
};

P13nServiceClient.prototype.send_updateChoice = function(choiceUpdateRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChoice', Thrift.MessageType.CALL, this.seqid());
  var args = new P13nService_updateChoice_args();
  args.choiceUpdateRequest = choiceUpdateRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

P13nServiceClient.prototype.recv_updateChoice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new P13nService_updateChoice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p13nServiceException) {
    return callback(result.p13nServiceException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateChoice failed: unknown result');
};
var P13nServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
P13nServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
P13nServiceProcessor.prototype.process_choose = function(seqid, input, output) {
  var args = new P13nService_choose_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.choose.length === 1) {
    Q.fcall(this._handler.choose, args.choiceRequest)
      .then(function(result) {
        var result_obj = new P13nService_choose_result({success: result});
        output.writeMessageBegin("choose", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.P13nServiceException) {
          result = new P13nService_choose_result(err);
          output.writeMessageBegin("choose", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("choose", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.choose(args.choiceRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.P13nServiceException) {
        result_obj = new P13nService_choose_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("choose", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("choose", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
P13nServiceProcessor.prototype.process_chooseAll = function(seqid, input, output) {
  var args = new P13nService_chooseAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.chooseAll.length === 1) {
    Q.fcall(this._handler.chooseAll, args.bundle)
      .then(function(result) {
        var result_obj = new P13nService_chooseAll_result({success: result});
        output.writeMessageBegin("chooseAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.P13nServiceException) {
          result = new P13nService_chooseAll_result(err);
          output.writeMessageBegin("chooseAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chooseAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.chooseAll(args.bundle, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.P13nServiceException) {
        result_obj = new P13nService_chooseAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("chooseAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("chooseAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
P13nServiceProcessor.prototype.process_batchChoose = function(seqid, input, output) {
  var args = new P13nService_batchChoose_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.batchChoose.length === 1) {
    Q.fcall(this._handler.batchChoose, args.batchChoiceRequest)
      .then(function(result) {
        var result_obj = new P13nService_batchChoose_result({success: result});
        output.writeMessageBegin("batchChoose", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.P13nServiceException) {
          result = new P13nService_batchChoose_result(err);
          output.writeMessageBegin("batchChoose", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("batchChoose", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.batchChoose(args.batchChoiceRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.P13nServiceException) {
        result_obj = new P13nService_batchChoose_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("batchChoose", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("batchChoose", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
P13nServiceProcessor.prototype.process_autocomplete = function(seqid, input, output) {
  var args = new P13nService_autocomplete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.autocomplete.length === 1) {
    Q.fcall(this._handler.autocomplete, args.request)
      .then(function(result) {
        var result_obj = new P13nService_autocomplete_result({success: result});
        output.writeMessageBegin("autocomplete", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.P13nServiceException) {
          result = new P13nService_autocomplete_result(err);
          output.writeMessageBegin("autocomplete", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("autocomplete", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.autocomplete(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.P13nServiceException) {
        result_obj = new P13nService_autocomplete_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("autocomplete", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("autocomplete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
P13nServiceProcessor.prototype.process_autocompleteAll = function(seqid, input, output) {
  var args = new P13nService_autocompleteAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.autocompleteAll.length === 1) {
    Q.fcall(this._handler.autocompleteAll, args.bundle)
      .then(function(result) {
        var result_obj = new P13nService_autocompleteAll_result({success: result});
        output.writeMessageBegin("autocompleteAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.P13nServiceException) {
          result = new P13nService_autocompleteAll_result(err);
          output.writeMessageBegin("autocompleteAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("autocompleteAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.autocompleteAll(args.bundle, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.P13nServiceException) {
        result_obj = new P13nService_autocompleteAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("autocompleteAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("autocompleteAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
P13nServiceProcessor.prototype.process_updateChoice = function(seqid, input, output) {
  var args = new P13nService_updateChoice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChoice.length === 1) {
    Q.fcall(this._handler.updateChoice, args.choiceUpdateRequest)
      .then(function(result) {
        var result_obj = new P13nService_updateChoice_result({success: result});
        output.writeMessageBegin("updateChoice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.P13nServiceException) {
          result = new P13nService_updateChoice_result(err);
          output.writeMessageBegin("updateChoice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateChoice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChoice(args.choiceUpdateRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.P13nServiceException) {
        result_obj = new P13nService_updateChoice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateChoice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateChoice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
