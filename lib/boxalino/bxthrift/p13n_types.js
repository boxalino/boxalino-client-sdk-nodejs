//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.DateRangeGap = {
  'SECOND' : 1,
  'MINUTE' : 2,
  'HOUR' : 3,
  'DAY' : 4,
  'WEEK' : 5,
  'MONTH' : 6,
  'YEAR' : 7,
  'DECADE' : 8,
  'CENTURY' : 9
};
ttypes.FacetSortOrder = {
  'POPULATION' : 1,
  'COLLATION' : 2
};
var Filter = module.exports.Filter = function(args) {
  this.negative = null;
  this.fieldName = null;
  this.stringValues = null;
  this.prefix = null;
  this.hierarchyId = null;
  this.hierarchy = null;
  this.rangeFrom = null;
  this.rangeFromInclusive = null;
  this.rangeTo = null;
  this.rangeToInclusive = null;
  if (args) {
    if (args.negative !== undefined && args.negative !== null) {
      this.negative = args.negative;
    }
    if (args.fieldName !== undefined && args.fieldName !== null) {
      this.fieldName = args.fieldName;
    }
    if (args.stringValues !== undefined && args.stringValues !== null) {
      this.stringValues = Thrift.copyList(args.stringValues, [null]);
    }
    if (args.prefix !== undefined && args.prefix !== null) {
      this.prefix = args.prefix;
    }
    if (args.hierarchyId !== undefined && args.hierarchyId !== null) {
      this.hierarchyId = args.hierarchyId;
    }
    if (args.hierarchy !== undefined && args.hierarchy !== null) {
      this.hierarchy = Thrift.copyList(args.hierarchy, [null]);
    }
    if (args.rangeFrom !== undefined && args.rangeFrom !== null) {
      this.rangeFrom = args.rangeFrom;
    }
    if (args.rangeFromInclusive !== undefined && args.rangeFromInclusive !== null) {
      this.rangeFromInclusive = args.rangeFromInclusive;
    }
    if (args.rangeTo !== undefined && args.rangeTo !== null) {
      this.rangeTo = args.rangeTo;
    }
    if (args.rangeToInclusive !== undefined && args.rangeToInclusive !== null) {
      this.rangeToInclusive = args.rangeToInclusive;
    }
  }
};
Filter.prototype = {};
Filter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.negative = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.stringValues = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.stringValues.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.hierarchyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.hierarchy = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.hierarchy.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rangeFrom = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.rangeFromInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.rangeTo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.rangeToInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Filter.prototype.write = function(output) {
  output.writeStructBegin('Filter');
  if (this.negative !== null && this.negative !== undefined) {
    output.writeFieldBegin('negative', Thrift.Type.BOOL, 1);
    output.writeBool(this.negative);
    output.writeFieldEnd();
  }
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 2);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.stringValues !== null && this.stringValues !== undefined) {
    output.writeFieldBegin('stringValues', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.stringValues.length);
    for (var iter14 in this.stringValues)
    {
      if (this.stringValues.hasOwnProperty(iter14))
      {
        iter14 = this.stringValues[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 4);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  if (this.hierarchyId !== null && this.hierarchyId !== undefined) {
    output.writeFieldBegin('hierarchyId', Thrift.Type.STRING, 41);
    output.writeString(this.hierarchyId);
    output.writeFieldEnd();
  }
  if (this.hierarchy !== null && this.hierarchy !== undefined) {
    output.writeFieldBegin('hierarchy', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.hierarchy.length);
    for (var iter15 in this.hierarchy)
    {
      if (this.hierarchy.hasOwnProperty(iter15))
      {
        iter15 = this.hierarchy[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rangeFrom !== null && this.rangeFrom !== undefined) {
    output.writeFieldBegin('rangeFrom', Thrift.Type.STRING, 6);
    output.writeString(this.rangeFrom);
    output.writeFieldEnd();
  }
  if (this.rangeFromInclusive !== null && this.rangeFromInclusive !== undefined) {
    output.writeFieldBegin('rangeFromInclusive', Thrift.Type.BOOL, 7);
    output.writeBool(this.rangeFromInclusive);
    output.writeFieldEnd();
  }
  if (this.rangeTo !== null && this.rangeTo !== undefined) {
    output.writeFieldBegin('rangeTo', Thrift.Type.STRING, 8);
    output.writeString(this.rangeTo);
    output.writeFieldEnd();
  }
  if (this.rangeToInclusive !== null && this.rangeToInclusive !== undefined) {
    output.writeFieldBegin('rangeToInclusive', Thrift.Type.BOOL, 9);
    output.writeBool(this.rangeToInclusive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FacetValue = module.exports.FacetValue = function(args) {
  this.stringValue = null;
  this.rangeFromInclusive = null;
  this.rangeToExclusive = null;
  this.hitCount = null;
  this.hierarchyId = null;
  this.hierarchy = null;
  this.selected = null;
  if (args) {
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
    if (args.rangeFromInclusive !== undefined && args.rangeFromInclusive !== null) {
      this.rangeFromInclusive = args.rangeFromInclusive;
    }
    if (args.rangeToExclusive !== undefined && args.rangeToExclusive !== null) {
      this.rangeToExclusive = args.rangeToExclusive;
    }
    if (args.hitCount !== undefined && args.hitCount !== null) {
      this.hitCount = args.hitCount;
    }
    if (args.hierarchyId !== undefined && args.hierarchyId !== null) {
      this.hierarchyId = args.hierarchyId;
    }
    if (args.hierarchy !== undefined && args.hierarchy !== null) {
      this.hierarchy = Thrift.copyList(args.hierarchy, [null]);
    }
    if (args.selected !== undefined && args.selected !== null) {
      this.selected = args.selected;
    }
  }
};
FacetValue.prototype = {};
FacetValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rangeFromInclusive = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rangeToExclusive = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.hitCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.hierarchyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.hierarchy = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.hierarchy.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.BOOL) {
        this.selected = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacetValue.prototype.write = function(output) {
  output.writeStructBegin('FacetValue');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.rangeFromInclusive !== null && this.rangeFromInclusive !== undefined) {
    output.writeFieldBegin('rangeFromInclusive', Thrift.Type.STRING, 2);
    output.writeString(this.rangeFromInclusive);
    output.writeFieldEnd();
  }
  if (this.rangeToExclusive !== null && this.rangeToExclusive !== undefined) {
    output.writeFieldBegin('rangeToExclusive', Thrift.Type.STRING, 3);
    output.writeString(this.rangeToExclusive);
    output.writeFieldEnd();
  }
  if (this.hitCount !== null && this.hitCount !== undefined) {
    output.writeFieldBegin('hitCount', Thrift.Type.I64, 4);
    output.writeI64(this.hitCount);
    output.writeFieldEnd();
  }
  if (this.hierarchyId !== null && this.hierarchyId !== undefined) {
    output.writeFieldBegin('hierarchyId', Thrift.Type.STRING, 50);
    output.writeString(this.hierarchyId);
    output.writeFieldEnd();
  }
  if (this.hierarchy !== null && this.hierarchy !== undefined) {
    output.writeFieldBegin('hierarchy', Thrift.Type.LIST, 60);
    output.writeListBegin(Thrift.Type.STRING, this.hierarchy.length);
    for (var iter23 in this.hierarchy)
    {
      if (this.hierarchy.hasOwnProperty(iter23))
      {
        iter23 = this.hierarchy[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selected !== null && this.selected !== undefined) {
    output.writeFieldBegin('selected', Thrift.Type.BOOL, 70);
    output.writeBool(this.selected);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FacetRequest = module.exports.FacetRequest = function(args) {
  this.fieldName = null;
  this.numerical = null;
  this.range = null;
  this.maxCount = -1;
  this.minPopulation = 1;
  this.dateRangeGap = null;
  this.sortOrder = null;
  this.sortAscending = null;
  this.selectedValues = null;
  this.andSelectedValues = false;
  this.boundsOnly = false;
  this.evaluate = true;
  this.display = null;
  this.extraInfo = null;
  if (args) {
    if (args.fieldName !== undefined && args.fieldName !== null) {
      this.fieldName = args.fieldName;
    }
    if (args.numerical !== undefined && args.numerical !== null) {
      this.numerical = args.numerical;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = args.range;
    }
    if (args.maxCount !== undefined && args.maxCount !== null) {
      this.maxCount = args.maxCount;
    }
    if (args.minPopulation !== undefined && args.minPopulation !== null) {
      this.minPopulation = args.minPopulation;
    }
    if (args.dateRangeGap !== undefined && args.dateRangeGap !== null) {
      this.dateRangeGap = args.dateRangeGap;
    }
    if (args.sortOrder !== undefined && args.sortOrder !== null) {
      this.sortOrder = args.sortOrder;
    }
    if (args.sortAscending !== undefined && args.sortAscending !== null) {
      this.sortAscending = args.sortAscending;
    }
    if (args.selectedValues !== undefined && args.selectedValues !== null) {
      this.selectedValues = Thrift.copyList(args.selectedValues, [ttypes.FacetValue]);
    }
    if (args.andSelectedValues !== undefined && args.andSelectedValues !== null) {
      this.andSelectedValues = args.andSelectedValues;
    }
    if (args.boundsOnly !== undefined && args.boundsOnly !== null) {
      this.boundsOnly = args.boundsOnly;
    }
    if (args.evaluate !== undefined && args.evaluate !== null) {
      this.evaluate = args.evaluate;
    }
    if (args.display !== undefined && args.display !== null) {
      this.display = args.display;
    }
    if (args.extraInfo !== undefined && args.extraInfo !== null) {
      this.extraInfo = Thrift.copyMap(args.extraInfo, [null]);
    }
  }
};
FacetRequest.prototype = {};
FacetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.numerical = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.range = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.minPopulation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dateRangeGap = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.sortOrder = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.sortAscending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.selectedValues = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.FacetValue();
          elem30.read(input);
          this.selectedValues.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.BOOL) {
        this.andSelectedValues = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 110:
      if (ftype == Thrift.Type.BOOL) {
        this.boundsOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 120:
      if (ftype == Thrift.Type.BOOL) {
        this.evaluate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 130:
      if (ftype == Thrift.Type.STRING) {
        this.display = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 140:
      if (ftype == Thrift.Type.MAP) {
        var _size31 = 0;
        var _rtmp335;
        this.extraInfo = {};
        var _ktype32 = 0;
        var _vtype33 = 0;
        _rtmp335 = input.readMapBegin();
        _ktype32 = _rtmp335.ktype;
        _vtype33 = _rtmp335.vtype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var key37 = null;
          var val38 = null;
          key37 = input.readString();
          val38 = input.readString();
          this.extraInfo[key37] = val38;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacetRequest.prototype.write = function(output) {
  output.writeStructBegin('FacetRequest');
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 1);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.numerical !== null && this.numerical !== undefined) {
    output.writeFieldBegin('numerical', Thrift.Type.BOOL, 2);
    output.writeBool(this.numerical);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.BOOL, 3);
    output.writeBool(this.range);
    output.writeFieldEnd();
  }
  if (this.maxCount !== null && this.maxCount !== undefined) {
    output.writeFieldBegin('maxCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxCount);
    output.writeFieldEnd();
  }
  if (this.minPopulation !== null && this.minPopulation !== undefined) {
    output.writeFieldBegin('minPopulation', Thrift.Type.I32, 5);
    output.writeI32(this.minPopulation);
    output.writeFieldEnd();
  }
  if (this.dateRangeGap !== null && this.dateRangeGap !== undefined) {
    output.writeFieldBegin('dateRangeGap', Thrift.Type.I32, 6);
    output.writeI32(this.dateRangeGap);
    output.writeFieldEnd();
  }
  if (this.sortOrder !== null && this.sortOrder !== undefined) {
    output.writeFieldBegin('sortOrder', Thrift.Type.I32, 7);
    output.writeI32(this.sortOrder);
    output.writeFieldEnd();
  }
  if (this.sortAscending !== null && this.sortAscending !== undefined) {
    output.writeFieldBegin('sortAscending', Thrift.Type.BOOL, 8);
    output.writeBool(this.sortAscending);
    output.writeFieldEnd();
  }
  if (this.selectedValues !== null && this.selectedValues !== undefined) {
    output.writeFieldBegin('selectedValues', Thrift.Type.LIST, 90);
    output.writeListBegin(Thrift.Type.STRUCT, this.selectedValues.length);
    for (var iter39 in this.selectedValues)
    {
      if (this.selectedValues.hasOwnProperty(iter39))
      {
        iter39 = this.selectedValues[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.andSelectedValues !== null && this.andSelectedValues !== undefined) {
    output.writeFieldBegin('andSelectedValues', Thrift.Type.BOOL, 100);
    output.writeBool(this.andSelectedValues);
    output.writeFieldEnd();
  }
  if (this.boundsOnly !== null && this.boundsOnly !== undefined) {
    output.writeFieldBegin('boundsOnly', Thrift.Type.BOOL, 110);
    output.writeBool(this.boundsOnly);
    output.writeFieldEnd();
  }
  if (this.evaluate !== null && this.evaluate !== undefined) {
    output.writeFieldBegin('evaluate', Thrift.Type.BOOL, 120);
    output.writeBool(this.evaluate);
    output.writeFieldEnd();
  }
  if (this.display !== null && this.display !== undefined) {
    output.writeFieldBegin('display', Thrift.Type.STRING, 130);
    output.writeString(this.display);
    output.writeFieldEnd();
  }
  if (this.extraInfo !== null && this.extraInfo !== undefined) {
    output.writeFieldBegin('extraInfo', Thrift.Type.MAP, 140);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraInfo));
    for (var kiter40 in this.extraInfo)
    {
      if (this.extraInfo.hasOwnProperty(kiter40))
      {
        var viter41 = this.extraInfo[kiter40];
        output.writeString(kiter40);
        output.writeString(viter41);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SortField = module.exports.SortField = function(args) {
  this.fieldName = null;
  this.reverse = null;
  if (args) {
    if (args.fieldName !== undefined && args.fieldName !== null) {
      this.fieldName = args.fieldName;
    }
    if (args.reverse !== undefined && args.reverse !== null) {
      this.reverse = args.reverse;
    }
  }
};
SortField.prototype = {};
SortField.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.reverse = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SortField.prototype.write = function(output) {
  output.writeStructBegin('SortField');
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 1);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.reverse !== null && this.reverse !== undefined) {
    output.writeFieldBegin('reverse', Thrift.Type.BOOL, 2);
    output.writeBool(this.reverse);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SimpleSearchQuery = module.exports.SimpleSearchQuery = function(args) {
  this.indexId = null;
  this.language = null;
  this.queryText = null;
  this.filters = null;
  this.orFilters = null;
  this.facetRequests = null;
  this.sortFields = null;
  this.offset = null;
  this.hitCount = null;
  this.returnFields = null;
  this.groupBy = null;
  this.groupFacets = true;
  this.groupItemsCount = 1;
  this.groupItemsSort = 'score';
  this.groupItemsSortAscending = false;
  this.hitsGroupsAsHits = false;
  if (args) {
    if (args.indexId !== undefined && args.indexId !== null) {
      this.indexId = args.indexId;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.queryText !== undefined && args.queryText !== null) {
      this.queryText = args.queryText;
    }
    if (args.filters !== undefined && args.filters !== null) {
      this.filters = Thrift.copyList(args.filters, [ttypes.Filter]);
    }
    if (args.orFilters !== undefined && args.orFilters !== null) {
      this.orFilters = args.orFilters;
    }
    if (args.facetRequests !== undefined && args.facetRequests !== null) {
      this.facetRequests = Thrift.copyList(args.facetRequests, [ttypes.FacetRequest]);
    }
    if (args.sortFields !== undefined && args.sortFields !== null) {
      this.sortFields = Thrift.copyList(args.sortFields, [ttypes.SortField]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.hitCount !== undefined && args.hitCount !== null) {
      this.hitCount = args.hitCount;
    }
    if (args.returnFields !== undefined && args.returnFields !== null) {
      this.returnFields = Thrift.copyList(args.returnFields, [null]);
    }
    if (args.groupBy !== undefined && args.groupBy !== null) {
      this.groupBy = args.groupBy;
    }
    if (args.groupFacets !== undefined && args.groupFacets !== null) {
      this.groupFacets = args.groupFacets;
    }
    if (args.groupItemsCount !== undefined && args.groupItemsCount !== null) {
      this.groupItemsCount = args.groupItemsCount;
    }
    if (args.groupItemsSort !== undefined && args.groupItemsSort !== null) {
      this.groupItemsSort = args.groupItemsSort;
    }
    if (args.groupItemsSortAscending !== undefined && args.groupItemsSortAscending !== null) {
      this.groupItemsSortAscending = args.groupItemsSortAscending;
    }
    if (args.hitsGroupsAsHits !== undefined && args.hitsGroupsAsHits !== null) {
      this.hitsGroupsAsHits = args.hitsGroupsAsHits;
    }
  }
};
SimpleSearchQuery.prototype = {};
SimpleSearchQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.indexId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.queryText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.filters = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new ttypes.Filter();
          elem48.read(input);
          this.filters.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.orFilters = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.facetRequests = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = new ttypes.FacetRequest();
          elem55.read(input);
          this.facetRequests.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.sortFields = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.SortField();
          elem62.read(input);
          this.sortFields.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.hitCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.returnFields = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = input.readString();
          this.returnFields.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.groupBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.BOOL) {
        this.groupFacets = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.groupItemsCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.groupItemsSort = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.BOOL) {
        this.groupItemsSortAscending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.BOOL) {
        this.hitsGroupsAsHits = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSearchQuery.prototype.write = function(output) {
  output.writeStructBegin('SimpleSearchQuery');
  if (this.indexId !== null && this.indexId !== undefined) {
    output.writeFieldBegin('indexId', Thrift.Type.STRING, 1);
    output.writeString(this.indexId);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.queryText !== null && this.queryText !== undefined) {
    output.writeFieldBegin('queryText', Thrift.Type.STRING, 3);
    output.writeString(this.queryText);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.filters.length);
    for (var iter70 in this.filters)
    {
      if (this.filters.hasOwnProperty(iter70))
      {
        iter70 = this.filters[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.orFilters !== null && this.orFilters !== undefined) {
    output.writeFieldBegin('orFilters', Thrift.Type.BOOL, 5);
    output.writeBool(this.orFilters);
    output.writeFieldEnd();
  }
  if (this.facetRequests !== null && this.facetRequests !== undefined) {
    output.writeFieldBegin('facetRequests', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.facetRequests.length);
    for (var iter71 in this.facetRequests)
    {
      if (this.facetRequests.hasOwnProperty(iter71))
      {
        iter71 = this.facetRequests[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sortFields !== null && this.sortFields !== undefined) {
    output.writeFieldBegin('sortFields', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortFields.length);
    for (var iter72 in this.sortFields)
    {
      if (this.sortFields.hasOwnProperty(iter72))
      {
        iter72 = this.sortFields[iter72];
        iter72.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 8);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.hitCount !== null && this.hitCount !== undefined) {
    output.writeFieldBegin('hitCount', Thrift.Type.I32, 9);
    output.writeI32(this.hitCount);
    output.writeFieldEnd();
  }
  if (this.returnFields !== null && this.returnFields !== undefined) {
    output.writeFieldBegin('returnFields', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.returnFields.length);
    for (var iter73 in this.returnFields)
    {
      if (this.returnFields.hasOwnProperty(iter73))
      {
        iter73 = this.returnFields[iter73];
        output.writeString(iter73);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.groupBy !== null && this.groupBy !== undefined) {
    output.writeFieldBegin('groupBy', Thrift.Type.STRING, 20);
    output.writeString(this.groupBy);
    output.writeFieldEnd();
  }
  if (this.groupFacets !== null && this.groupFacets !== undefined) {
    output.writeFieldBegin('groupFacets', Thrift.Type.BOOL, 30);
    output.writeBool(this.groupFacets);
    output.writeFieldEnd();
  }
  if (this.groupItemsCount !== null && this.groupItemsCount !== undefined) {
    output.writeFieldBegin('groupItemsCount', Thrift.Type.I32, 40);
    output.writeI32(this.groupItemsCount);
    output.writeFieldEnd();
  }
  if (this.groupItemsSort !== null && this.groupItemsSort !== undefined) {
    output.writeFieldBegin('groupItemsSort', Thrift.Type.STRING, 50);
    output.writeString(this.groupItemsSort);
    output.writeFieldEnd();
  }
  if (this.groupItemsSortAscending !== null && this.groupItemsSortAscending !== undefined) {
    output.writeFieldBegin('groupItemsSortAscending', Thrift.Type.BOOL, 60);
    output.writeBool(this.groupItemsSortAscending);
    output.writeFieldEnd();
  }
  if (this.hitsGroupsAsHits !== null && this.hitsGroupsAsHits !== undefined) {
    output.writeFieldBegin('hitsGroupsAsHits', Thrift.Type.BOOL, 70);
    output.writeBool(this.hitsGroupsAsHits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextItem = module.exports.ContextItem = function(args) {
  this.indexId = null;
  this.fieldName = null;
  this.contextItemId = null;
  this.role = null;
  if (args) {
    if (args.indexId !== undefined && args.indexId !== null) {
      this.indexId = args.indexId;
    }
    if (args.fieldName !== undefined && args.fieldName !== null) {
      this.fieldName = args.fieldName;
    }
    if (args.contextItemId !== undefined && args.contextItemId !== null) {
      this.contextItemId = args.contextItemId;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
ContextItem.prototype = {};
ContextItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.indexId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contextItemId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextItem.prototype.write = function(output) {
  output.writeStructBegin('ContextItem');
  if (this.indexId !== null && this.indexId !== undefined) {
    output.writeFieldBegin('indexId', Thrift.Type.STRING, 1);
    output.writeString(this.indexId);
    output.writeFieldEnd();
  }
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 2);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.contextItemId !== null && this.contextItemId !== undefined) {
    output.writeFieldBegin('contextItemId', Thrift.Type.STRING, 3);
    output.writeString(this.contextItemId);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 4);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChoiceInquiry = module.exports.ChoiceInquiry = function(args) {
  this.choiceId = null;
  this.simpleSearchQuery = null;
  this.contextItems = null;
  this.minHitCount = null;
  this.excludeVariantIds = null;
  this.scope = 'system_rec';
  this.withRelaxation = false;
  this.withSemanticFiltering = false;
  this.includeVariantIds = null;
  if (args) {
    if (args.choiceId !== undefined && args.choiceId !== null) {
      this.choiceId = args.choiceId;
    }
    if (args.simpleSearchQuery !== undefined && args.simpleSearchQuery !== null) {
      this.simpleSearchQuery = new ttypes.SimpleSearchQuery(args.simpleSearchQuery);
    }
    if (args.contextItems !== undefined && args.contextItems !== null) {
      this.contextItems = Thrift.copyList(args.contextItems, [ttypes.ContextItem]);
    }
    if (args.minHitCount !== undefined && args.minHitCount !== null) {
      this.minHitCount = args.minHitCount;
    }
    if (args.excludeVariantIds !== undefined && args.excludeVariantIds !== null) {
      this.excludeVariantIds = Thrift.copyList(args.excludeVariantIds, [null]);
    }
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.withRelaxation !== undefined && args.withRelaxation !== null) {
      this.withRelaxation = args.withRelaxation;
    }
    if (args.withSemanticFiltering !== undefined && args.withSemanticFiltering !== null) {
      this.withSemanticFiltering = args.withSemanticFiltering;
    }
    if (args.includeVariantIds !== undefined && args.includeVariantIds !== null) {
      this.includeVariantIds = Thrift.copyList(args.includeVariantIds, [null]);
    }
  }
};
ChoiceInquiry.prototype = {};
ChoiceInquiry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.choiceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.simpleSearchQuery = new ttypes.SimpleSearchQuery();
        this.simpleSearchQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.contextItems = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new ttypes.ContextItem();
          elem80.read(input);
          this.contextItems.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.minHitCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size81 = 0;
        var _rtmp385;
        this.excludeVariantIds = [];
        var _etype84 = 0;
        _rtmp385 = input.readSetBegin();
        _etype84 = _rtmp385.etype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var elem87 = null;
          elem87 = input.readString();
          this.excludeVariantIds.push(elem87);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.scope = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.BOOL) {
        this.withRelaxation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.BOOL) {
        this.withSemanticFiltering = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.SET) {
        var _size88 = 0;
        var _rtmp392;
        this.includeVariantIds = [];
        var _etype91 = 0;
        _rtmp392 = input.readSetBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.includeVariantIds.push(elem94);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceInquiry.prototype.write = function(output) {
  output.writeStructBegin('ChoiceInquiry');
  if (this.choiceId !== null && this.choiceId !== undefined) {
    output.writeFieldBegin('choiceId', Thrift.Type.STRING, 1);
    output.writeString(this.choiceId);
    output.writeFieldEnd();
  }
  if (this.simpleSearchQuery !== null && this.simpleSearchQuery !== undefined) {
    output.writeFieldBegin('simpleSearchQuery', Thrift.Type.STRUCT, 2);
    this.simpleSearchQuery.write(output);
    output.writeFieldEnd();
  }
  if (this.contextItems !== null && this.contextItems !== undefined) {
    output.writeFieldBegin('contextItems', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.contextItems.length);
    for (var iter95 in this.contextItems)
    {
      if (this.contextItems.hasOwnProperty(iter95))
      {
        iter95 = this.contextItems[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.minHitCount !== null && this.minHitCount !== undefined) {
    output.writeFieldBegin('minHitCount', Thrift.Type.I32, 4);
    output.writeI32(this.minHitCount);
    output.writeFieldEnd();
  }
  if (this.excludeVariantIds !== null && this.excludeVariantIds !== undefined) {
    output.writeFieldBegin('excludeVariantIds', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.excludeVariantIds.length);
    for (var iter96 in this.excludeVariantIds)
    {
      if (this.excludeVariantIds.hasOwnProperty(iter96))
      {
        iter96 = this.excludeVariantIds[iter96];
        output.writeString(iter96);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.STRING, 6);
    output.writeString(this.scope);
    output.writeFieldEnd();
  }
  if (this.withRelaxation !== null && this.withRelaxation !== undefined) {
    output.writeFieldBegin('withRelaxation', Thrift.Type.BOOL, 70);
    output.writeBool(this.withRelaxation);
    output.writeFieldEnd();
  }
  if (this.withSemanticFiltering !== null && this.withSemanticFiltering !== undefined) {
    output.writeFieldBegin('withSemanticFiltering', Thrift.Type.BOOL, 80);
    output.writeBool(this.withSemanticFiltering);
    output.writeFieldEnd();
  }
  if (this.includeVariantIds !== null && this.includeVariantIds !== undefined) {
    output.writeFieldBegin('includeVariantIds', Thrift.Type.SET, 90);
    output.writeSetBegin(Thrift.Type.STRING, this.includeVariantIds.length);
    for (var iter97 in this.includeVariantIds)
    {
      if (this.includeVariantIds.hasOwnProperty(iter97))
      {
        iter97 = this.includeVariantIds[iter97];
        output.writeString(iter97);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestContext = module.exports.RequestContext = function(args) {
  this.parameters = null;
  if (args) {
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [Thrift.copyList, null]);
    }
  }
};
RequestContext.prototype = {};
RequestContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size98 = 0;
        var _rtmp3102;
        this.parameters = {};
        var _ktype99 = 0;
        var _vtype100 = 0;
        _rtmp3102 = input.readMapBegin();
        _ktype99 = _rtmp3102.ktype;
        _vtype100 = _rtmp3102.vtype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var key104 = null;
          var val105 = null;
          key104 = input.readString();
          var _size106 = 0;
          var _rtmp3110;
          val105 = [];
          var _etype109 = 0;
          _rtmp3110 = input.readListBegin();
          _etype109 = _rtmp3110.etype;
          _size106 = _rtmp3110.size;
          for (var _i111 = 0; _i111 < _size106; ++_i111)
          {
            var elem112 = null;
            elem112 = input.readString();
            val105.push(elem112);
          }
          input.readListEnd();
          this.parameters[key104] = val105;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestContext.prototype.write = function(output) {
  output.writeStructBegin('RequestContext');
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.parameters));
    for (var kiter113 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter113))
      {
        var viter114 = this.parameters[kiter113];
        output.writeString(kiter113);
        output.writeListBegin(Thrift.Type.STRING, viter114.length);
        for (var iter115 in viter114)
        {
          if (viter114.hasOwnProperty(iter115))
          {
            iter115 = viter114[iter115];
            output.writeString(iter115);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserRecord = module.exports.UserRecord = function(args) {
  this.username = null;
  this.apiKey = null;
  this.apiSecret = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.apiKey !== undefined && args.apiKey !== null) {
      this.apiKey = args.apiKey;
    }
    if (args.apiSecret !== undefined && args.apiSecret !== null) {
      this.apiSecret = args.apiSecret;
    }
  }
};
UserRecord.prototype = {};
UserRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.apiKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.apiSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserRecord.prototype.write = function(output) {
  output.writeStructBegin('UserRecord');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.apiKey !== null && this.apiKey !== undefined) {
    output.writeFieldBegin('apiKey', Thrift.Type.STRING, 10);
    output.writeString(this.apiKey);
    output.writeFieldEnd();
  }
  if (this.apiSecret !== null && this.apiSecret !== undefined) {
    output.writeFieldBegin('apiSecret', Thrift.Type.STRING, 20);
    output.writeString(this.apiSecret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChoiceRequest = module.exports.ChoiceRequest = function(args) {
  this.userRecord = null;
  this.profileId = null;
  this.inquiries = null;
  this.requestContext = null;
  if (args) {
    if (args.userRecord !== undefined && args.userRecord !== null) {
      this.userRecord = new ttypes.UserRecord(args.userRecord);
    }
    if (args.profileId !== undefined && args.profileId !== null) {
      this.profileId = args.profileId;
    }
    if (args.inquiries !== undefined && args.inquiries !== null) {
      this.inquiries = Thrift.copyList(args.inquiries, [ttypes.ChoiceInquiry]);
    }
    if (args.requestContext !== undefined && args.requestContext !== null) {
      this.requestContext = new ttypes.RequestContext(args.requestContext);
    }
  }
};
ChoiceRequest.prototype = {};
ChoiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userRecord = new ttypes.UserRecord();
        this.userRecord.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.profileId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.inquiries = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = new ttypes.ChoiceInquiry();
          elem122.read(input);
          this.inquiries.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestContext = new ttypes.RequestContext();
        this.requestContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceRequest.prototype.write = function(output) {
  output.writeStructBegin('ChoiceRequest');
  if (this.userRecord !== null && this.userRecord !== undefined) {
    output.writeFieldBegin('userRecord', Thrift.Type.STRUCT, 1);
    this.userRecord.write(output);
    output.writeFieldEnd();
  }
  if (this.profileId !== null && this.profileId !== undefined) {
    output.writeFieldBegin('profileId', Thrift.Type.STRING, 2);
    output.writeString(this.profileId);
    output.writeFieldEnd();
  }
  if (this.inquiries !== null && this.inquiries !== undefined) {
    output.writeFieldBegin('inquiries', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.inquiries.length);
    for (var iter123 in this.inquiries)
    {
      if (this.inquiries.hasOwnProperty(iter123))
      {
        iter123 = this.inquiries[iter123];
        iter123.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestContext !== null && this.requestContext !== undefined) {
    output.writeFieldBegin('requestContext', Thrift.Type.STRUCT, 4);
    this.requestContext.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChoiceRequestBundle = module.exports.ChoiceRequestBundle = function(args) {
  this.requests = null;
  if (args) {
    if (args.requests !== undefined && args.requests !== null) {
      this.requests = Thrift.copyList(args.requests, [ttypes.ChoiceRequest]);
    }
  }
};
ChoiceRequestBundle.prototype = {};
ChoiceRequestBundle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.requests = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.ChoiceRequest();
          elem130.read(input);
          this.requests.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceRequestBundle.prototype.write = function(output) {
  output.writeStructBegin('ChoiceRequestBundle');
  if (this.requests !== null && this.requests !== undefined) {
    output.writeFieldBegin('requests', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.requests.length);
    for (var iter131 in this.requests)
    {
      if (this.requests.hasOwnProperty(iter131))
      {
        iter131 = this.requests[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChoiceResponseBundle = module.exports.ChoiceResponseBundle = function(args) {
  this.responses = null;
  if (args) {
    if (args.responses !== undefined && args.responses !== null) {
      this.responses = Thrift.copyList(args.responses, [null]);
    }
  }
};
ChoiceResponseBundle.prototype = {};
ChoiceResponseBundle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.responses = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.ChoiceResponse();
          elem138.read(input);
          this.responses.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceResponseBundle.prototype.write = function(output) {
  output.writeStructBegin('ChoiceResponseBundle');
  if (this.responses !== null && this.responses !== undefined) {
    output.writeFieldBegin('responses', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.responses.length);
    for (var iter139 in this.responses)
    {
      if (this.responses.hasOwnProperty(iter139))
      {
        iter139 = this.responses[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FacetResponse = module.exports.FacetResponse = function(args) {
  this.fieldName = null;
  this.values = null;
  this.evaluate = null;
  this.display = null;
  this.numerical = null;
  this.range = null;
  this.sortOrder = null;
  this.sortAscending = null;
  this.andSelectedValues = null;
  this.boundsOnly = null;
  this.extraInfo = null;
  if (args) {
    if (args.fieldName !== undefined && args.fieldName !== null) {
      this.fieldName = args.fieldName;
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [ttypes.FacetValue]);
    }
    if (args.evaluate !== undefined && args.evaluate !== null) {
      this.evaluate = args.evaluate;
    }
    if (args.display !== undefined && args.display !== null) {
      this.display = args.display;
    }
    if (args.numerical !== undefined && args.numerical !== null) {
      this.numerical = args.numerical;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = args.range;
    }
    if (args.sortOrder !== undefined && args.sortOrder !== null) {
      this.sortOrder = args.sortOrder;
    }
    if (args.sortAscending !== undefined && args.sortAscending !== null) {
      this.sortAscending = args.sortAscending;
    }
    if (args.andSelectedValues !== undefined && args.andSelectedValues !== null) {
      this.andSelectedValues = args.andSelectedValues;
    }
    if (args.boundsOnly !== undefined && args.boundsOnly !== null) {
      this.boundsOnly = args.boundsOnly;
    }
    if (args.extraInfo !== undefined && args.extraInfo !== null) {
      this.extraInfo = Thrift.copyMap(args.extraInfo, [null]);
    }
  }
};
FacetResponse.prototype = {};
FacetResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.values = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.FacetValue();
          elem146.read(input);
          this.values.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.evaluate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.display = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.numerical = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.range = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.sortOrder = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.sortAscending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.andSelectedValues = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.boundsOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size147 = 0;
        var _rtmp3151;
        this.extraInfo = {};
        var _ktype148 = 0;
        var _vtype149 = 0;
        _rtmp3151 = input.readMapBegin();
        _ktype148 = _rtmp3151.ktype;
        _vtype149 = _rtmp3151.vtype;
        _size147 = _rtmp3151.size;
        for (var _i152 = 0; _i152 < _size147; ++_i152)
        {
          var key153 = null;
          var val154 = null;
          key153 = input.readString();
          val154 = input.readString();
          this.extraInfo[key153] = val154;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacetResponse.prototype.write = function(output) {
  output.writeStructBegin('FacetResponse');
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 1);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter155 in this.values)
    {
      if (this.values.hasOwnProperty(iter155))
      {
        iter155 = this.values[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.evaluate !== null && this.evaluate !== undefined) {
    output.writeFieldBegin('evaluate', Thrift.Type.BOOL, 3);
    output.writeBool(this.evaluate);
    output.writeFieldEnd();
  }
  if (this.display !== null && this.display !== undefined) {
    output.writeFieldBegin('display', Thrift.Type.STRING, 4);
    output.writeString(this.display);
    output.writeFieldEnd();
  }
  if (this.numerical !== null && this.numerical !== undefined) {
    output.writeFieldBegin('numerical', Thrift.Type.BOOL, 5);
    output.writeBool(this.numerical);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.BOOL, 6);
    output.writeBool(this.range);
    output.writeFieldEnd();
  }
  if (this.sortOrder !== null && this.sortOrder !== undefined) {
    output.writeFieldBegin('sortOrder', Thrift.Type.I32, 7);
    output.writeI32(this.sortOrder);
    output.writeFieldEnd();
  }
  if (this.sortAscending !== null && this.sortAscending !== undefined) {
    output.writeFieldBegin('sortAscending', Thrift.Type.BOOL, 8);
    output.writeBool(this.sortAscending);
    output.writeFieldEnd();
  }
  if (this.andSelectedValues !== null && this.andSelectedValues !== undefined) {
    output.writeFieldBegin('andSelectedValues', Thrift.Type.BOOL, 9);
    output.writeBool(this.andSelectedValues);
    output.writeFieldEnd();
  }
  if (this.boundsOnly !== null && this.boundsOnly !== undefined) {
    output.writeFieldBegin('boundsOnly', Thrift.Type.BOOL, 10);
    output.writeBool(this.boundsOnly);
    output.writeFieldEnd();
  }
  if (this.extraInfo !== null && this.extraInfo !== undefined) {
    output.writeFieldBegin('extraInfo', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraInfo));
    for (var kiter156 in this.extraInfo)
    {
      if (this.extraInfo.hasOwnProperty(kiter156))
      {
        var viter157 = this.extraInfo[kiter156];
        output.writeString(kiter156);
        output.writeString(viter157);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hit = module.exports.Hit = function(args) {
  this.values = null;
  this.score = null;
  this.scenarioId = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyMap(args.values, [Thrift.copyList, null]);
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.scenarioId !== undefined && args.scenarioId !== null) {
      this.scenarioId = args.scenarioId;
    }
  }
};
Hit.prototype = {};
Hit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size158 = 0;
        var _rtmp3162;
        this.values = {};
        var _ktype159 = 0;
        var _vtype160 = 0;
        _rtmp3162 = input.readMapBegin();
        _ktype159 = _rtmp3162.ktype;
        _vtype160 = _rtmp3162.vtype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          //EXISTS IN JS; without this - using multiple return fields fails
          if (_i163 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key164 = null;
          var val165 = null;
          key164 = input.readString();
          var _size166 = 0;
          var _rtmp3170;
          val165 = [];
          var _etype169 = 0;
          _rtmp3170 = input.readListBegin();
          _etype169 = _rtmp3170.etype;
          _size166 = _rtmp3170.size;
          for (var _i171 = 0; _i171 < _size166; ++_i171)
          {
            var elem172 = null;
            elem172 = input.readString();
            val165.push(elem172);
          }
          input.readListEnd();
          this.values[key164] = val165;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.scenarioId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hit.prototype.write = function(output) {
  output.writeStructBegin('Hit');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.values));
    for (var kiter173 in this.values)
    {
      if (this.values.hasOwnProperty(kiter173))
      {
        var viter174 = this.values[kiter173];
        output.writeString(kiter173);
        output.writeListBegin(Thrift.Type.STRING, viter174.length);
        for (var iter175 in viter174)
        {
          if (viter174.hasOwnProperty(iter175))
          {
            iter175 = viter174[iter175];
            output.writeString(iter175);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.scenarioId !== null && this.scenarioId !== undefined) {
    output.writeFieldBegin('scenarioId', Thrift.Type.STRING, 30);
    output.writeString(this.scenarioId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HitsGroup = module.exports.HitsGroup = function(args) {
  this.groupValue = null;
  this.totalHitCount = null;
  this.hits = null;
  if (args) {
    if (args.groupValue !== undefined && args.groupValue !== null) {
      this.groupValue = args.groupValue;
    }
    if (args.totalHitCount !== undefined && args.totalHitCount !== null) {
      this.totalHitCount = args.totalHitCount;
    }
    if (args.hits !== undefined && args.hits !== null) {
      this.hits = Thrift.copyList(args.hits, [ttypes.Hit]);
    }
  }
};
HitsGroup.prototype = {};
HitsGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.groupValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.totalHitCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.hits = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = new ttypes.Hit();
          elem182.read(input);
          this.hits.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HitsGroup.prototype.write = function(output) {
  output.writeStructBegin('HitsGroup');
  if (this.groupValue !== null && this.groupValue !== undefined) {
    output.writeFieldBegin('groupValue', Thrift.Type.STRING, 10);
    output.writeString(this.groupValue);
    output.writeFieldEnd();
  }
  if (this.totalHitCount !== null && this.totalHitCount !== undefined) {
    output.writeFieldBegin('totalHitCount', Thrift.Type.I64, 20);
    output.writeI64(this.totalHitCount);
    output.writeFieldEnd();
  }
  if (this.hits !== null && this.hits !== undefined) {
    output.writeFieldBegin('hits', Thrift.Type.LIST, 30);
    output.writeListBegin(Thrift.Type.STRUCT, this.hits.length);
    for (var iter183 in this.hits)
    {
      if (this.hits.hasOwnProperty(iter183))
      {
        iter183 = this.hits[iter183];
        iter183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchResult = module.exports.SearchResult = function(args) {
  this.hits = null;
  this.facetResponses = null;
  this.totalHitCount = null;
  this.queryText = null;
  this.hitsGroups = null;
  if (args) {
    if (args.hits !== undefined && args.hits !== null) {
      this.hits = Thrift.copyList(args.hits, [ttypes.Hit]);
    }
    if (args.facetResponses !== undefined && args.facetResponses !== null) {
      this.facetResponses = Thrift.copyList(args.facetResponses, [ttypes.FacetResponse]);
    }
    if (args.totalHitCount !== undefined && args.totalHitCount !== null) {
      this.totalHitCount = args.totalHitCount;
    }
    if (args.queryText !== undefined && args.queryText !== null) {
      this.queryText = args.queryText;
    }
    if (args.hitsGroups !== undefined && args.hitsGroups !== null) {
      this.hitsGroups = Thrift.copyList(args.hitsGroups, [ttypes.HitsGroup]);
    }
  }
};
SearchResult.prototype = {};
SearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.hits = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = new ttypes.Hit();
          elem190.read(input);
          this.hits.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size191 = 0;
        var _rtmp3195;
        this.facetResponses = [];
        var _etype194 = 0;
        _rtmp3195 = input.readListBegin();
        _etype194 = _rtmp3195.etype;
        _size191 = _rtmp3195.size;
        for (var _i196 = 0; _i196 < _size191; ++_i196)
        {
          var elem197 = null;
          elem197 = new ttypes.FacetResponse();
          elem197.read(input);
          this.facetResponses.push(elem197);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.totalHitCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.queryText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.hitsGroups = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = new ttypes.HitsGroup();
          elem204.read(input);
          this.hitsGroups.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchResult.prototype.write = function(output) {
  output.writeStructBegin('SearchResult');
  if (this.hits !== null && this.hits !== undefined) {
    output.writeFieldBegin('hits', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.hits.length);
    for (var iter205 in this.hits)
    {
      if (this.hits.hasOwnProperty(iter205))
      {
        iter205 = this.hits[iter205];
        iter205.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.facetResponses !== null && this.facetResponses !== undefined) {
    output.writeFieldBegin('facetResponses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.facetResponses.length);
    for (var iter206 in this.facetResponses)
    {
      if (this.facetResponses.hasOwnProperty(iter206))
      {
        iter206 = this.facetResponses[iter206];
        iter206.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalHitCount !== null && this.totalHitCount !== undefined) {
    output.writeFieldBegin('totalHitCount', Thrift.Type.I64, 3);
    output.writeI64(this.totalHitCount);
    output.writeFieldEnd();
  }
  if (this.queryText !== null && this.queryText !== undefined) {
    output.writeFieldBegin('queryText', Thrift.Type.STRING, 40);
    output.writeString(this.queryText);
    output.writeFieldEnd();
  }
  if (this.hitsGroups !== null && this.hitsGroups !== undefined) {
    output.writeFieldBegin('hitsGroups', Thrift.Type.LIST, 50);
    output.writeListBegin(Thrift.Type.STRUCT, this.hitsGroups.length);
    for (var iter207 in this.hitsGroups)
    {
      if (this.hitsGroups.hasOwnProperty(iter207))
      {
        iter207 = this.hitsGroups[iter207];
        iter207.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchRelaxation = module.exports.SearchRelaxation = function(args) {
  this.suggestionsResults = null;
  this.subphrasesResults = null;
  if (args) {
    if (args.suggestionsResults !== undefined && args.suggestionsResults !== null) {
      this.suggestionsResults = Thrift.copyList(args.suggestionsResults, [ttypes.SearchResult]);
    }
    if (args.subphrasesResults !== undefined && args.subphrasesResults !== null) {
      this.subphrasesResults = Thrift.copyList(args.subphrasesResults, [ttypes.SearchResult]);
    }
  }
};
SearchRelaxation.prototype = {};
SearchRelaxation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.suggestionsResults = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = new ttypes.SearchResult();
          elem214.read(input);
          this.suggestionsResults.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size215 = 0;
        var _rtmp3219;
        this.subphrasesResults = [];
        var _etype218 = 0;
        _rtmp3219 = input.readListBegin();
        _etype218 = _rtmp3219.etype;
        _size215 = _rtmp3219.size;
        for (var _i220 = 0; _i220 < _size215; ++_i220)
        {
          var elem221 = null;
          elem221 = new ttypes.SearchResult();
          elem221.read(input);
          this.subphrasesResults.push(elem221);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchRelaxation.prototype.write = function(output) {
  output.writeStructBegin('SearchRelaxation');
  if (this.suggestionsResults !== null && this.suggestionsResults !== undefined) {
    output.writeFieldBegin('suggestionsResults', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.suggestionsResults.length);
    for (var iter222 in this.suggestionsResults)
    {
      if (this.suggestionsResults.hasOwnProperty(iter222))
      {
        iter222 = this.suggestionsResults[iter222];
        iter222.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.subphrasesResults !== null && this.subphrasesResults !== undefined) {
    output.writeFieldBegin('subphrasesResults', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.subphrasesResults.length);
    for (var iter223 in this.subphrasesResults)
    {
      if (this.subphrasesResults.hasOwnProperty(iter223))
      {
        iter223 = this.subphrasesResults[iter223];
        iter223.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Variant = module.exports.Variant = function(args) {
  this.variantId = null;
  this.scenarioId = null;
  this.searchResult = null;
  this.searchResultTitle = null;
  this.searchRelaxation = null;
  this.semanticFilteringResults = null;
  this.extraInfo = null;
  if (args) {
    if (args.variantId !== undefined && args.variantId !== null) {
      this.variantId = args.variantId;
    }
    if (args.scenarioId !== undefined && args.scenarioId !== null) {
      this.scenarioId = args.scenarioId;
    }
    if (args.searchResult !== undefined && args.searchResult !== null) {
      this.searchResult = new ttypes.SearchResult(args.searchResult);
    }
    if (args.searchResultTitle !== undefined && args.searchResultTitle !== null) {
      this.searchResultTitle = args.searchResultTitle;
    }
    if (args.searchRelaxation !== undefined && args.searchRelaxation !== null) {
      this.searchRelaxation = new ttypes.SearchRelaxation(args.searchRelaxation);
    }
    if (args.semanticFilteringResults !== undefined && args.semanticFilteringResults !== null) {
      this.semanticFilteringResults = Thrift.copyList(args.semanticFilteringResults, [ttypes.SearchResult]);
    }
    if (args.extraInfo !== undefined && args.extraInfo !== null) {
      this.extraInfo = Thrift.copyMap(args.extraInfo, [null]);
    }
  }
};
Variant.prototype = {};
Variant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.variantId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scenarioId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResult = new ttypes.SearchResult();
        this.searchResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.searchResultTitle = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchRelaxation = new ttypes.SearchRelaxation();
        this.searchRelaxation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.semanticFilteringResults = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = new ttypes.SearchResult();
          elem230.read(input);
          this.semanticFilteringResults.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.MAP) {
        var _size231 = 0;
        var _rtmp3235;
        this.extraInfo = {};
        var _ktype232 = 0;
        var _vtype233 = 0;
        _rtmp3235 = input.readMapBegin();
        _ktype232 = _rtmp3235.ktype;
        _vtype233 = _rtmp3235.vtype;
        _size231 = _rtmp3235.size;
        for (var _i236 = 0; _i236 < _size231; ++_i236)
        {
          var key237 = null;
          var val238 = null;
          key237 = input.readString();
          val238 = input.readString();
          this.extraInfo[key237] = val238;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Variant.prototype.write = function(output) {
  output.writeStructBegin('Variant');
  if (this.variantId !== null && this.variantId !== undefined) {
    output.writeFieldBegin('variantId', Thrift.Type.STRING, 1);
    output.writeString(this.variantId);
    output.writeFieldEnd();
  }
  if (this.scenarioId !== null && this.scenarioId !== undefined) {
    output.writeFieldBegin('scenarioId', Thrift.Type.STRING, 2);
    output.writeString(this.scenarioId);
    output.writeFieldEnd();
  }
  if (this.searchResult !== null && this.searchResult !== undefined) {
    output.writeFieldBegin('searchResult', Thrift.Type.STRUCT, 3);
    this.searchResult.write(output);
    output.writeFieldEnd();
  }
  if (this.searchResultTitle !== null && this.searchResultTitle !== undefined) {
    output.writeFieldBegin('searchResultTitle', Thrift.Type.STRING, 4);
    output.writeString(this.searchResultTitle);
    output.writeFieldEnd();
  }
  if (this.searchRelaxation !== null && this.searchRelaxation !== undefined) {
    output.writeFieldBegin('searchRelaxation', Thrift.Type.STRUCT, 50);
    this.searchRelaxation.write(output);
    output.writeFieldEnd();
  }
  if (this.semanticFilteringResults !== null && this.semanticFilteringResults !== undefined) {
    output.writeFieldBegin('semanticFilteringResults', Thrift.Type.LIST, 60);
    output.writeListBegin(Thrift.Type.STRUCT, this.semanticFilteringResults.length);
    for (var iter239 in this.semanticFilteringResults)
    {
      if (this.semanticFilteringResults.hasOwnProperty(iter239))
      {
        iter239 = this.semanticFilteringResults[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraInfo !== null && this.extraInfo !== undefined) {
    output.writeFieldBegin('extraInfo', Thrift.Type.MAP, 70);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraInfo));
    for (var kiter240 in this.extraInfo)
    {
      if (this.extraInfo.hasOwnProperty(kiter240))
      {
        var viter241 = this.extraInfo[kiter240];
        output.writeString(kiter240);
        output.writeString(viter241);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChoiceResponse = module.exports.ChoiceResponse = function(args) {
  this.variants = null;
  if (args) {
    if (args.variants !== undefined && args.variants !== null) {
      this.variants = Thrift.copyList(args.variants, [ttypes.Variant]);
    }
  }
};
ChoiceResponse.prototype = {};
ChoiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.variants = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = new ttypes.Variant();
          elem248.read(input);
          this.variants.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceResponse.prototype.write = function(output) {
  output.writeStructBegin('ChoiceResponse');
  if (this.variants !== null && this.variants !== undefined) {
    output.writeFieldBegin('variants', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.variants.length);
    for (var iter249 in this.variants)
    {
      if (this.variants.hasOwnProperty(iter249))
      {
        iter249 = this.variants[iter249];
        iter249.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProfilePropertyValue = module.exports.ProfilePropertyValue = function(args) {
  this.profileId = null;
  this.propertyName = null;
  this.propertyValue = null;
  this.confidence = null;
  if (args) {
    if (args.profileId !== undefined && args.profileId !== null) {
      this.profileId = args.profileId;
    }
    if (args.propertyName !== undefined && args.propertyName !== null) {
      this.propertyName = args.propertyName;
    }
    if (args.propertyValue !== undefined && args.propertyValue !== null) {
      this.propertyValue = args.propertyValue;
    }
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
  }
};
ProfilePropertyValue.prototype = {};
ProfilePropertyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.profileId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.propertyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.propertyValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.confidence = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProfilePropertyValue.prototype.write = function(output) {
  output.writeStructBegin('ProfilePropertyValue');
  if (this.profileId !== null && this.profileId !== undefined) {
    output.writeFieldBegin('profileId', Thrift.Type.STRING, 1);
    output.writeString(this.profileId);
    output.writeFieldEnd();
  }
  if (this.propertyName !== null && this.propertyName !== undefined) {
    output.writeFieldBegin('propertyName', Thrift.Type.STRING, 2);
    output.writeString(this.propertyName);
    output.writeFieldEnd();
  }
  if (this.propertyValue !== null && this.propertyValue !== undefined) {
    output.writeFieldBegin('propertyValue', Thrift.Type.STRING, 3);
    output.writeString(this.propertyValue);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.I32, 4);
    output.writeI32(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProfileContext = module.exports.ProfileContext = function(args) {
  this.profileId = null;
  this.requestContext = null;
  if (args) {
    if (args.profileId !== undefined && args.profileId !== null) {
      this.profileId = args.profileId;
    }
    if (args.requestContext !== undefined && args.requestContext !== null) {
      this.requestContext = new ttypes.RequestContext(args.requestContext);
    }
  }
};
ProfileContext.prototype = {};
ProfileContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.profileId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestContext = new ttypes.RequestContext();
        this.requestContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProfileContext.prototype.write = function(output) {
  output.writeStructBegin('ProfileContext');
  if (this.profileId !== null && this.profileId !== undefined) {
    output.writeFieldBegin('profileId', Thrift.Type.STRING, 1);
    output.writeString(this.profileId);
    output.writeFieldEnd();
  }
  if (this.requestContext !== null && this.requestContext !== undefined) {
    output.writeFieldBegin('requestContext', Thrift.Type.STRUCT, 2);
    this.requestContext.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchChoiceRequest = module.exports.BatchChoiceRequest = function(args) {
  this.userRecord = null;
  this.choiceInquiry = null;
  this.requestContext = null;
  this.profileIds = null;
  this.choiceInquiries = null;
  this.profileContexts = null;
  if (args) {
    if (args.userRecord !== undefined && args.userRecord !== null) {
      this.userRecord = new ttypes.UserRecord(args.userRecord);
    }
    if (args.choiceInquiry !== undefined && args.choiceInquiry !== null) {
      this.choiceInquiry = new ttypes.ChoiceInquiry(args.choiceInquiry);
    }
    if (args.requestContext !== undefined && args.requestContext !== null) {
      this.requestContext = new ttypes.RequestContext(args.requestContext);
    }
    if (args.profileIds !== undefined && args.profileIds !== null) {
      this.profileIds = Thrift.copyList(args.profileIds, [null]);
    }
    if (args.choiceInquiries !== undefined && args.choiceInquiries !== null) {
      this.choiceInquiries = Thrift.copyList(args.choiceInquiries, [ttypes.ChoiceInquiry]);
    }
    if (args.profileContexts !== undefined && args.profileContexts !== null) {
      this.profileContexts = Thrift.copyList(args.profileContexts, [ttypes.ProfileContext]);
    }
  }
};
BatchChoiceRequest.prototype = {};
BatchChoiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userRecord = new ttypes.UserRecord();
        this.userRecord.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.choiceInquiry = new ttypes.ChoiceInquiry();
        this.choiceInquiry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestContext = new ttypes.RequestContext();
        this.requestContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.profileIds = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = input.readString();
          this.profileIds.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size257 = 0;
        var _rtmp3261;
        this.choiceInquiries = [];
        var _etype260 = 0;
        _rtmp3261 = input.readListBegin();
        _etype260 = _rtmp3261.etype;
        _size257 = _rtmp3261.size;
        for (var _i262 = 0; _i262 < _size257; ++_i262)
        {
          var elem263 = null;
          elem263 = new ttypes.ChoiceInquiry();
          elem263.read(input);
          this.choiceInquiries.push(elem263);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.profileContexts = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = new ttypes.ProfileContext();
          elem270.read(input);
          this.profileContexts.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchChoiceRequest.prototype.write = function(output) {
  output.writeStructBegin('BatchChoiceRequest');
  if (this.userRecord !== null && this.userRecord !== undefined) {
    output.writeFieldBegin('userRecord', Thrift.Type.STRUCT, 1);
    this.userRecord.write(output);
    output.writeFieldEnd();
  }
  if (this.choiceInquiry !== null && this.choiceInquiry !== undefined) {
    output.writeFieldBegin('choiceInquiry', Thrift.Type.STRUCT, 2);
    this.choiceInquiry.write(output);
    output.writeFieldEnd();
  }
  if (this.requestContext !== null && this.requestContext !== undefined) {
    output.writeFieldBegin('requestContext', Thrift.Type.STRUCT, 3);
    this.requestContext.write(output);
    output.writeFieldEnd();
  }
  if (this.profileIds !== null && this.profileIds !== undefined) {
    output.writeFieldBegin('profileIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.profileIds.length);
    for (var iter271 in this.profileIds)
    {
      if (this.profileIds.hasOwnProperty(iter271))
      {
        iter271 = this.profileIds[iter271];
        output.writeString(iter271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.choiceInquiries !== null && this.choiceInquiries !== undefined) {
    output.writeFieldBegin('choiceInquiries', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.choiceInquiries.length);
    for (var iter272 in this.choiceInquiries)
    {
      if (this.choiceInquiries.hasOwnProperty(iter272))
      {
        iter272 = this.choiceInquiries[iter272];
        iter272.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.profileContexts !== null && this.profileContexts !== undefined) {
    output.writeFieldBegin('profileContexts', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.profileContexts.length);
    for (var iter273 in this.profileContexts)
    {
      if (this.profileContexts.hasOwnProperty(iter273))
      {
        iter273 = this.profileContexts[iter273];
        iter273.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchChoiceResponse = module.exports.BatchChoiceResponse = function(args) {
  this.variants = null;
  this.selectedVariants = null;
  if (args) {
    if (args.variants !== undefined && args.variants !== null) {
      this.variants = Thrift.copyList(args.variants, [ttypes.Variant]);
    }
    if (args.selectedVariants !== undefined && args.selectedVariants !== null) {
      this.selectedVariants = Thrift.copyList(args.selectedVariants, [Thrift.copyList, ttypes.Variant]);
    }
  }
};
BatchChoiceResponse.prototype = {};
BatchChoiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size274 = 0;
        var _rtmp3278;
        this.variants = [];
        var _etype277 = 0;
        _rtmp3278 = input.readListBegin();
        _etype277 = _rtmp3278.etype;
        _size274 = _rtmp3278.size;
        for (var _i279 = 0; _i279 < _size274; ++_i279)
        {
          var elem280 = null;
          elem280 = new ttypes.Variant();
          elem280.read(input);
          this.variants.push(elem280);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size281 = 0;
        var _rtmp3285;
        this.selectedVariants = [];
        var _etype284 = 0;
        _rtmp3285 = input.readListBegin();
        _etype284 = _rtmp3285.etype;
        _size281 = _rtmp3285.size;
        for (var _i286 = 0; _i286 < _size281; ++_i286)
        {
          var elem287 = null;
          var _size288 = 0;
          var _rtmp3292;
          elem287 = [];
          var _etype291 = 0;
          _rtmp3292 = input.readListBegin();
          _etype291 = _rtmp3292.etype;
          _size288 = _rtmp3292.size;
          for (var _i293 = 0; _i293 < _size288; ++_i293)
          {
            var elem294 = null;
            elem294 = new ttypes.Variant();
            elem294.read(input);
            elem287.push(elem294);
          }
          input.readListEnd();
          this.selectedVariants.push(elem287);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchChoiceResponse.prototype.write = function(output) {
  output.writeStructBegin('BatchChoiceResponse');
  if (this.variants !== null && this.variants !== undefined) {
    output.writeFieldBegin('variants', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.variants.length);
    for (var iter295 in this.variants)
    {
      if (this.variants.hasOwnProperty(iter295))
      {
        iter295 = this.variants[iter295];
        iter295.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selectedVariants !== null && this.selectedVariants !== undefined) {
    output.writeFieldBegin('selectedVariants', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.selectedVariants.length);
    for (var iter296 in this.selectedVariants)
    {
      if (this.selectedVariants.hasOwnProperty(iter296))
      {
        iter296 = this.selectedVariants[iter296];
        output.writeListBegin(Thrift.Type.STRUCT, iter296.length);
        for (var iter297 in iter296)
        {
          if (iter296.hasOwnProperty(iter297))
          {
            iter297 = iter296[iter297];
            iter297.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutocompleteHit = module.exports.AutocompleteHit = function(args) {
  this.suggestion = null;
  this.highlighted = null;
  this.searchResult = null;
  this.score = null;
  if (args) {
    if (args.suggestion !== undefined && args.suggestion !== null) {
      this.suggestion = args.suggestion;
    }
    if (args.highlighted !== undefined && args.highlighted !== null) {
      this.highlighted = args.highlighted;
    }
    if (args.searchResult !== undefined && args.searchResult !== null) {
      this.searchResult = new ttypes.SearchResult(args.searchResult);
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
  }
};
AutocompleteHit.prototype = {};
AutocompleteHit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.suggestion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.highlighted = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResult = new ttypes.SearchResult();
        this.searchResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutocompleteHit.prototype.write = function(output) {
  output.writeStructBegin('AutocompleteHit');
  if (this.suggestion !== null && this.suggestion !== undefined) {
    output.writeFieldBegin('suggestion', Thrift.Type.STRING, 11);
    output.writeString(this.suggestion);
    output.writeFieldEnd();
  }
  if (this.highlighted !== null && this.highlighted !== undefined) {
    output.writeFieldBegin('highlighted', Thrift.Type.STRING, 21);
    output.writeString(this.highlighted);
    output.writeFieldEnd();
  }
  if (this.searchResult !== null && this.searchResult !== undefined) {
    output.writeFieldBegin('searchResult', Thrift.Type.STRUCT, 31);
    this.searchResult.write(output);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 41);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutocompleteQuery = module.exports.AutocompleteQuery = function(args) {
  this.indexId = null;
  this.language = null;
  this.queryText = null;
  this.suggestionsHitCount = null;
  this.highlight = null;
  this.highlightPre = '<em>';
  this.highlightPost = '</em>';
  if (args) {
    if (args.indexId !== undefined && args.indexId !== null) {
      this.indexId = args.indexId;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.queryText !== undefined && args.queryText !== null) {
      this.queryText = args.queryText;
    }
    if (args.suggestionsHitCount !== undefined && args.suggestionsHitCount !== null) {
      this.suggestionsHitCount = args.suggestionsHitCount;
    }
    if (args.highlight !== undefined && args.highlight !== null) {
      this.highlight = args.highlight;
    }
    if (args.highlightPre !== undefined && args.highlightPre !== null) {
      this.highlightPre = args.highlightPre;
    }
    if (args.highlightPost !== undefined && args.highlightPost !== null) {
      this.highlightPost = args.highlightPost;
    }
  }
};
AutocompleteQuery.prototype = {};
AutocompleteQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.indexId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.queryText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I32) {
        this.suggestionsHitCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.BOOL) {
        this.highlight = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.STRING) {
        this.highlightPre = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 71:
      if (ftype == Thrift.Type.STRING) {
        this.highlightPost = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutocompleteQuery.prototype.write = function(output) {
  output.writeStructBegin('AutocompleteQuery');
  if (this.indexId !== null && this.indexId !== undefined) {
    output.writeFieldBegin('indexId', Thrift.Type.STRING, 11);
    output.writeString(this.indexId);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 21);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.queryText !== null && this.queryText !== undefined) {
    output.writeFieldBegin('queryText', Thrift.Type.STRING, 31);
    output.writeString(this.queryText);
    output.writeFieldEnd();
  }
  if (this.suggestionsHitCount !== null && this.suggestionsHitCount !== undefined) {
    output.writeFieldBegin('suggestionsHitCount', Thrift.Type.I32, 41);
    output.writeI32(this.suggestionsHitCount);
    output.writeFieldEnd();
  }
  if (this.highlight !== null && this.highlight !== undefined) {
    output.writeFieldBegin('highlight', Thrift.Type.BOOL, 51);
    output.writeBool(this.highlight);
    output.writeFieldEnd();
  }
  if (this.highlightPre !== null && this.highlightPre !== undefined) {
    output.writeFieldBegin('highlightPre', Thrift.Type.STRING, 61);
    output.writeString(this.highlightPre);
    output.writeFieldEnd();
  }
  if (this.highlightPost !== null && this.highlightPost !== undefined) {
    output.writeFieldBegin('highlightPost', Thrift.Type.STRING, 71);
    output.writeString(this.highlightPost);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutocompleteRequest = module.exports.AutocompleteRequest = function(args) {
  this.userRecord = null;
  this.scope = 'system_rec';
  this.choiceId = null;
  this.profileId = null;
  this.requestContext = null;
  this.excludeVariantIds = null;
  this.autocompleteQuery = null;
  this.searchChoiceId = null;
  this.searchQuery = null;
  this.includeVariantIds = null;
  this.propertyQueries = null;
  if (args) {
    if (args.userRecord !== undefined && args.userRecord !== null) {
      this.userRecord = new ttypes.UserRecord(args.userRecord);
    }
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.choiceId !== undefined && args.choiceId !== null) {
      this.choiceId = args.choiceId;
    }
    if (args.profileId !== undefined && args.profileId !== null) {
      this.profileId = args.profileId;
    }
    if (args.requestContext !== undefined && args.requestContext !== null) {
      this.requestContext = new ttypes.RequestContext(args.requestContext);
    }
    if (args.excludeVariantIds !== undefined && args.excludeVariantIds !== null) {
      this.excludeVariantIds = Thrift.copyList(args.excludeVariantIds, [null]);
    }
    if (args.autocompleteQuery !== undefined && args.autocompleteQuery !== null) {
      this.autocompleteQuery = new ttypes.AutocompleteQuery(args.autocompleteQuery);
    }
    if (args.searchChoiceId !== undefined && args.searchChoiceId !== null) {
      this.searchChoiceId = args.searchChoiceId;
    }
    if (args.searchQuery !== undefined && args.searchQuery !== null) {
      this.searchQuery = new ttypes.SimpleSearchQuery(args.searchQuery);
    }
    if (args.includeVariantIds !== undefined && args.includeVariantIds !== null) {
      this.includeVariantIds = Thrift.copyList(args.includeVariantIds, [null]);
    }
    if (args.propertyQueries !== undefined && args.propertyQueries !== null) {
      this.propertyQueries = Thrift.copyList(args.propertyQueries, [null]);
    }
  }
};
AutocompleteRequest.prototype = {};
AutocompleteRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.userRecord = new ttypes.UserRecord();
        this.userRecord.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.scope = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.choiceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.profileId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestContext = new ttypes.RequestContext();
        this.requestContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.SET) {
        var _size298 = 0;
        var _rtmp3302;
        this.excludeVariantIds = [];
        var _etype301 = 0;
        _rtmp3302 = input.readSetBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = input.readString();
          this.excludeVariantIds.push(elem304);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 71:
      if (ftype == Thrift.Type.STRUCT) {
        this.autocompleteQuery = new ttypes.AutocompleteQuery();
        this.autocompleteQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 81:
      if (ftype == Thrift.Type.STRING) {
        this.searchChoiceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 91:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchQuery = new ttypes.SimpleSearchQuery();
        this.searchQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.SET) {
        var _size305 = 0;
        var _rtmp3309;
        this.includeVariantIds = [];
        var _etype308 = 0;
        _rtmp3309 = input.readSetBegin();
        _etype308 = _rtmp3309.etype;
        _size305 = _rtmp3309.size;
        for (var _i310 = 0; _i310 < _size305; ++_i310)
        {
          var elem311 = null;
          elem311 = input.readString();
          this.includeVariantIds.push(elem311);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 110:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.propertyQueries = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = new ttypes.PropertyQuery();
          elem318.read(input);
          this.propertyQueries.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutocompleteRequest.prototype.write = function(output) {
  output.writeStructBegin('AutocompleteRequest');
  if (this.userRecord !== null && this.userRecord !== undefined) {
    output.writeFieldBegin('userRecord', Thrift.Type.STRUCT, 11);
    this.userRecord.write(output);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.STRING, 21);
    output.writeString(this.scope);
    output.writeFieldEnd();
  }
  if (this.choiceId !== null && this.choiceId !== undefined) {
    output.writeFieldBegin('choiceId', Thrift.Type.STRING, 31);
    output.writeString(this.choiceId);
    output.writeFieldEnd();
  }
  if (this.profileId !== null && this.profileId !== undefined) {
    output.writeFieldBegin('profileId', Thrift.Type.STRING, 41);
    output.writeString(this.profileId);
    output.writeFieldEnd();
  }
  if (this.requestContext !== null && this.requestContext !== undefined) {
    output.writeFieldBegin('requestContext', Thrift.Type.STRUCT, 51);
    this.requestContext.write(output);
    output.writeFieldEnd();
  }
  if (this.excludeVariantIds !== null && this.excludeVariantIds !== undefined) {
    output.writeFieldBegin('excludeVariantIds', Thrift.Type.SET, 61);
    output.writeSetBegin(Thrift.Type.STRING, this.excludeVariantIds.length);
    for (var iter319 in this.excludeVariantIds)
    {
      if (this.excludeVariantIds.hasOwnProperty(iter319))
      {
        iter319 = this.excludeVariantIds[iter319];
        output.writeString(iter319);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.autocompleteQuery !== null && this.autocompleteQuery !== undefined) {
    output.writeFieldBegin('autocompleteQuery', Thrift.Type.STRUCT, 71);
    this.autocompleteQuery.write(output);
    output.writeFieldEnd();
  }
  if (this.searchChoiceId !== null && this.searchChoiceId !== undefined) {
    output.writeFieldBegin('searchChoiceId', Thrift.Type.STRING, 81);
    output.writeString(this.searchChoiceId);
    output.writeFieldEnd();
  }
  if (this.searchQuery !== null && this.searchQuery !== undefined) {
    output.writeFieldBegin('searchQuery', Thrift.Type.STRUCT, 91);
    this.searchQuery.write(output);
    output.writeFieldEnd();
  }
  if (this.includeVariantIds !== null && this.includeVariantIds !== undefined) {
    output.writeFieldBegin('includeVariantIds', Thrift.Type.SET, 101);
    output.writeSetBegin(Thrift.Type.STRING, this.includeVariantIds.length);
    for (var iter320 in this.includeVariantIds)
    {
      if (this.includeVariantIds.hasOwnProperty(iter320))
      {
        iter320 = this.includeVariantIds[iter320];
        output.writeString(iter320);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.propertyQueries !== null && this.propertyQueries !== undefined) {
    output.writeFieldBegin('propertyQueries', Thrift.Type.LIST, 110);
    output.writeListBegin(Thrift.Type.STRUCT, this.propertyQueries.length);
    for (var iter321 in this.propertyQueries)
    {
      if (this.propertyQueries.hasOwnProperty(iter321))
      {
        iter321 = this.propertyQueries[iter321];
        iter321.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PropertyQuery = module.exports.PropertyQuery = function(args) {
  this.name = null;
  this.hitCount = null;
  this.evaluateTotal = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.hitCount !== undefined && args.hitCount !== null) {
      this.hitCount = args.hitCount;
    }
    if (args.evaluateTotal !== undefined && args.evaluateTotal !== null) {
      this.evaluateTotal = args.evaluateTotal;
    }
  }
};
PropertyQuery.prototype = {};
PropertyQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.hitCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.evaluateTotal = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropertyQuery.prototype.write = function(output) {
  output.writeStructBegin('PropertyQuery');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 11);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.hitCount !== null && this.hitCount !== undefined) {
    output.writeFieldBegin('hitCount', Thrift.Type.I32, 21);
    output.writeI32(this.hitCount);
    output.writeFieldEnd();
  }
  if (this.evaluateTotal !== null && this.evaluateTotal !== undefined) {
    output.writeFieldBegin('evaluateTotal', Thrift.Type.BOOL, 31);
    output.writeBool(this.evaluateTotal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PropertyResult = module.exports.PropertyResult = function(args) {
  this.hits = null;
  this.name = null;
  if (args) {
    if (args.hits !== undefined && args.hits !== null) {
      this.hits = Thrift.copyList(args.hits, [null]);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PropertyResult.prototype = {};
PropertyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.hits = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.PropertyHit();
          elem328.read(input);
          this.hits.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropertyResult.prototype.write = function(output) {
  output.writeStructBegin('PropertyResult');
  if (this.hits !== null && this.hits !== undefined) {
    output.writeFieldBegin('hits', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.hits.length);
    for (var iter329 in this.hits)
    {
      if (this.hits.hasOwnProperty(iter329))
      {
        iter329 = this.hits[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 21);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PropertyHit = module.exports.PropertyHit = function(args) {
  this.value = null;
  this.label = null;
  this.totalHitCount = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.totalHitCount !== undefined && args.totalHitCount !== null) {
      this.totalHitCount = args.totalHitCount;
    }
  }
};
PropertyHit.prototype = {};
PropertyHit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I64) {
        this.totalHitCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropertyHit.prototype.write = function(output) {
  output.writeStructBegin('PropertyHit');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 11);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 21);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.totalHitCount !== null && this.totalHitCount !== undefined) {
    output.writeFieldBegin('totalHitCount', Thrift.Type.I64, 31);
    output.writeI64(this.totalHitCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutocompleteResponse = module.exports.AutocompleteResponse = function(args) {
  this.hits = null;
  this.prefixSearchResult = null;
  this.propertyResults = null;
  this.extraInfo = null;
  if (args) {
    if (args.hits !== undefined && args.hits !== null) {
      this.hits = Thrift.copyList(args.hits, [ttypes.AutocompleteHit]);
    }
    if (args.prefixSearchResult !== undefined && args.prefixSearchResult !== null) {
      this.prefixSearchResult = new ttypes.SearchResult(args.prefixSearchResult);
    }
    if (args.propertyResults !== undefined && args.propertyResults !== null) {
      this.propertyResults = Thrift.copyList(args.propertyResults, [ttypes.PropertyResult]);
    }
    if (args.extraInfo !== undefined && args.extraInfo !== null) {
      this.extraInfo = Thrift.copyMap(args.extraInfo, [null]);
    }
  }
};
AutocompleteResponse.prototype = {};
AutocompleteResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.hits = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = new ttypes.AutocompleteHit();
          elem336.read(input);
          this.hits.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.prefixSearchResult = new ttypes.SearchResult();
        this.prefixSearchResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.LIST) {
        var _size337 = 0;
        var _rtmp3341;
        this.propertyResults = [];
        var _etype340 = 0;
        _rtmp3341 = input.readListBegin();
        _etype340 = _rtmp3341.etype;
        _size337 = _rtmp3341.size;
        for (var _i342 = 0; _i342 < _size337; ++_i342)
        {
          var elem343 = null;
          elem343 = new ttypes.PropertyResult();
          elem343.read(input);
          this.propertyResults.push(elem343);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.MAP) {
        var _size344 = 0;
        var _rtmp3348;
        this.extraInfo = {};
        var _ktype345 = 0;
        var _vtype346 = 0;
        _rtmp3348 = input.readMapBegin();
        _ktype345 = _rtmp3348.ktype;
        _vtype346 = _rtmp3348.vtype;
        _size344 = _rtmp3348.size;
        for (var _i349 = 0; _i349 < _size344; ++_i349)
        {
          var key350 = null;
          var val351 = null;
          key350 = input.readString();
          val351 = input.readString();
          this.extraInfo[key350] = val351;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutocompleteResponse.prototype.write = function(output) {
  output.writeStructBegin('AutocompleteResponse');
  if (this.hits !== null && this.hits !== undefined) {
    output.writeFieldBegin('hits', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.hits.length);
    for (var iter352 in this.hits)
    {
      if (this.hits.hasOwnProperty(iter352))
      {
        iter352 = this.hits[iter352];
        iter352.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.prefixSearchResult !== null && this.prefixSearchResult !== undefined) {
    output.writeFieldBegin('prefixSearchResult', Thrift.Type.STRUCT, 21);
    this.prefixSearchResult.write(output);
    output.writeFieldEnd();
  }
  if (this.propertyResults !== null && this.propertyResults !== undefined) {
    output.writeFieldBegin('propertyResults', Thrift.Type.LIST, 31);
    output.writeListBegin(Thrift.Type.STRUCT, this.propertyResults.length);
    for (var iter353 in this.propertyResults)
    {
      if (this.propertyResults.hasOwnProperty(iter353))
      {
        iter353 = this.propertyResults[iter353];
        iter353.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraInfo !== null && this.extraInfo !== undefined) {
    output.writeFieldBegin('extraInfo', Thrift.Type.MAP, 41);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraInfo));
    for (var kiter354 in this.extraInfo)
    {
      if (this.extraInfo.hasOwnProperty(kiter354))
      {
        var viter355 = this.extraInfo[kiter354];
        output.writeString(kiter354);
        output.writeString(viter355);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutocompleteRequestBundle = module.exports.AutocompleteRequestBundle = function(args) {
  this.requests = null;
  if (args) {
    if (args.requests !== undefined && args.requests !== null) {
      this.requests = Thrift.copyList(args.requests, [ttypes.AutocompleteRequest]);
    }
  }
};
AutocompleteRequestBundle.prototype = {};
AutocompleteRequestBundle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.requests = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = new ttypes.AutocompleteRequest();
          elem362.read(input);
          this.requests.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutocompleteRequestBundle.prototype.write = function(output) {
  output.writeStructBegin('AutocompleteRequestBundle');
  if (this.requests !== null && this.requests !== undefined) {
    output.writeFieldBegin('requests', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.requests.length);
    for (var iter363 in this.requests)
    {
      if (this.requests.hasOwnProperty(iter363))
      {
        iter363 = this.requests[iter363];
        iter363.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutocompleteResponseBundle = module.exports.AutocompleteResponseBundle = function(args) {
  this.responses = null;
  if (args) {
    if (args.responses !== undefined && args.responses !== null) {
      this.responses = Thrift.copyList(args.responses, [ttypes.AutocompleteResponse]);
    }
  }
};
AutocompleteResponseBundle.prototype = {};
AutocompleteResponseBundle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.responses = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = new ttypes.AutocompleteResponse();
          elem370.read(input);
          this.responses.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutocompleteResponseBundle.prototype.write = function(output) {
  output.writeStructBegin('AutocompleteResponseBundle');
  if (this.responses !== null && this.responses !== undefined) {
    output.writeFieldBegin('responses', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.responses.length);
    for (var iter371 in this.responses)
    {
      if (this.responses.hasOwnProperty(iter371))
      {
        iter371 = this.responses[iter371];
        iter371.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChoiceUpdateRequest = module.exports.ChoiceUpdateRequest = function(args) {
  this.userRecord = null;
  this.choiceId = null;
  this.variantIds = null;
  if (args) {
    if (args.userRecord !== undefined && args.userRecord !== null) {
      this.userRecord = new ttypes.UserRecord(args.userRecord);
    }
    if (args.choiceId !== undefined && args.choiceId !== null) {
      this.choiceId = args.choiceId;
    }
    if (args.variantIds !== undefined && args.variantIds !== null) {
      this.variantIds = Thrift.copyMap(args.variantIds, [null]);
    }
  }
};
ChoiceUpdateRequest.prototype = {};
ChoiceUpdateRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.userRecord = new ttypes.UserRecord();
        this.userRecord.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.choiceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.MAP) {
        var _size372 = 0;
        var _rtmp3376;
        this.variantIds = {};
        var _ktype373 = 0;
        var _vtype374 = 0;
        _rtmp3376 = input.readMapBegin();
        _ktype373 = _rtmp3376.ktype;
        _vtype374 = _rtmp3376.vtype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          var key378 = null;
          var val379 = null;
          key378 = input.readString();
          val379 = input.readI32();
          this.variantIds[key378] = val379;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceUpdateRequest.prototype.write = function(output) {
  output.writeStructBegin('ChoiceUpdateRequest');
  if (this.userRecord !== null && this.userRecord !== undefined) {
    output.writeFieldBegin('userRecord', Thrift.Type.STRUCT, 11);
    this.userRecord.write(output);
    output.writeFieldEnd();
  }
  if (this.choiceId !== null && this.choiceId !== undefined) {
    output.writeFieldBegin('choiceId', Thrift.Type.STRING, 21);
    output.writeString(this.choiceId);
    output.writeFieldEnd();
  }
  if (this.variantIds !== null && this.variantIds !== undefined) {
    output.writeFieldBegin('variantIds', Thrift.Type.MAP, 31);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.variantIds));
    for (var kiter380 in this.variantIds)
    {
      if (this.variantIds.hasOwnProperty(kiter380))
      {
        var viter381 = this.variantIds[kiter380];
        output.writeString(kiter380);
        output.writeI32(viter381);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChoiceUpdateResponse = module.exports.ChoiceUpdateResponse = function(args) {
  this.choiceId = null;
  if (args) {
    if (args.choiceId !== undefined && args.choiceId !== null) {
      this.choiceId = args.choiceId;
    }
  }
};
ChoiceUpdateResponse.prototype = {};
ChoiceUpdateResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.choiceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceUpdateResponse.prototype.write = function(output) {
  output.writeStructBegin('ChoiceUpdateResponse');
  if (this.choiceId !== null && this.choiceId !== undefined) {
    output.writeFieldBegin('choiceId', Thrift.Type.STRING, 11);
    output.writeString(this.choiceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var P13nServiceException = module.exports.P13nServiceException = function(args) {
  Thrift.TException.call(this, "P13nServiceException");
  this.name = "P13nServiceException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
Thrift.inherits(P13nServiceException, Thrift.TException);
P13nServiceException.prototype.name = 'P13nServiceException';
P13nServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P13nServiceException.prototype.write = function(output) {
  output.writeStructBegin('P13nServiceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

