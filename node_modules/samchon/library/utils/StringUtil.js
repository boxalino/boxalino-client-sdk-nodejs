"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var sxml_1 = require("sxml");
/**
 * A utility class supporting static methods of string.
 *
 * The {@link StringUtil} utility class is an all-static class with methods for working with string objects.
 * You do not create instances of {@link StringUtil}; instead you call methods such as the
 * ```StringUtil.substitute()``` method.
 *
 * @reference http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/mx/utils/StringUtil.html
 * @author Jeongho Nam <http://samchon.org>
 */
var StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /* ==================================================================
        SUBSTRING
            - BETWEEN(s)
            - TRIM
    =====================================================================
        BETWEEN(s)
    ------------------------------------------------------------------ */
    /**
     * Generate a substring.
     *
     * Extracts a substring consisting of the characters from specified start to end.
     * It's same with str.substring( ? = (str.find(start) + start.size()), str.find(end, ?) )
     *
     * ```typescript
     * let str: string = StringUtil.between("ABCD(EFGH)IJK", "(", ")");
     * console.log(str); // PRINTS "EFGH"
     * ```
     *
     * - If start is not specified, extracts from begin of the string to end. </li>
     * - If end is not specified, extracts from start to end of the string. </li>
     * - If start and end are all omitted, returns str, itself. </li>
     *
     * @param str Target string to be applied between.
     * @param start A string for separating substring at the front.
     * @param end A string for separating substring at the end.
     *
     * @return substring by specified terms.
     */
    StringUtil.between = function (str, start, end) {
        if (start === void 0) { start = ""; }
        if (end === void 0) { end = ""; }
        if (start == "" && end == "")
            return str;
        else if (start == "")
            return str.substr(0, str.indexOf(end));
        else if (end == "")
            return str.substr(str.indexOf(start) + start.length);
        else {
            var startIndex = str.indexOf(start);
            if (startIndex == -1)
                return "";
            return str.substring(startIndex + start.length, str.indexOf(end, startIndex + start.length));
        }
    };
    /**
     * Fetch substrings.
     *
     * Splits a string into an array of substrings dividing by specified delimeters of start and end.
     * It's the array of substrings adjusted the between.
     *
     * <ul>
     *	<li> If startStr is omitted, it's same with the split by endStr not having last item. </li>
        *	<li> If endStr is omitted, it's same with the split by startStr not having first item. </li>
        *	<li> If startStr and endStar are all omitted, returns *str*. </li>
        * </ul>
        *
        * @param str Target string to split by between.
        * @param start A string for separating substring at the front.
        *				If omitted, it's same with split(end) not having last item.
        * @param end A string for separating substring at the end.
        *			  If omitted, it's same with split(start) not having first item.
        * @return An array of substrings.
        */
    StringUtil.betweens = function (str, start, end) {
        if (start === void 0) { start = ""; }
        if (end === void 0) { end = ""; }
        var substrings = [];
        if (start == "" && end == "") {
            // PARAMETER IS NOT SPECIFIED
            // DO NOTHING
            return [str];
        }
        else if (start == end) {
            // SPLITTERS START AND END ARE EQUAL
            var prevIndex = -1;
            var endIndex = void 0;
            var n = 0;
            while ((endIndex = str.indexOf(start, prevIndex + 1)) != -1) {
                if (++n % 2 == 0) {
                    substrings.push(str.substring(prevIndex, endIndex));
                }
                endIndex = prevIndex;
            }
        }
        else {
            substrings = str.split(start).splice(1);
            if (end != "")
                for (var i = substrings.length - 1; i >= 0; i--)
                    if (substrings[i].indexOf(end) == -1)
                        substrings.splice(i, 1);
                    else
                        substrings[i] = StringUtil.between(substrings[i], "", end);
        }
        return substrings;
    };
    /**
     * Remove all designated characters from the beginning and end of the specified string.
     *
     * @param str The string whose designated characters should be trimmed.
     * @param args Designated character(s).
     *
     * @return Updated string where designated characters was removed from the beginning and end.
     */
    StringUtil.trim = function (str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (args.length == 0)
            args = StringUtil.SPACE_ARRAY;
        return StringUtil.ltrim.apply(StringUtil, __spread([StringUtil.rtrim.apply(StringUtil, __spread([str], args))], args));
    };
    /**
     * Remove all designated characters from the beginning of the specified string.
     *
     * @param str The string should be trimmed.
     * @param delims Designated character(s).
     *
     * @return Updated string where designated characters was removed from the beginning
     */
    StringUtil.ltrim = function (str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (args.length == 0)
            args = StringUtil.SPACE_ARRAY;
        var index = 0;
        while (index < str.length) {
            var maxIndex = index;
            for (var i = 0; i < args.length; i++) {
                var myIndex = str.indexOf(args[i], maxIndex) // START FROM PREVIOUS MAX_INDEX
                    + args[i].length; // ADD ITS LENGTH
                maxIndex = Math.max(maxIndex, myIndex);
            }
            if (maxIndex <= index)
                break; // CAN BE -1
            else
                index = maxIndex;
        }
        if (index == str.length)
            return "";
        else
            return str.substr(index);
    };
    /**
     * Remove all designated characters from the end of the specified string.
     *
     * @param str The string should be trimmed.
     * @param delims Designated character(s).
     *
     * @return Updated string where designated characters was removed from the end.
     */
    StringUtil.rtrim = function (str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (args.length == 0)
            args = StringUtil.SPACE_ARRAY;
        var index = str.length;
        while (index != 0) {
            var minIndex = index;
            for (var i = 0; i < args.length; i++) {
                var myIndex = str.lastIndexOf(args[i], minIndex - 1);
                if (myIndex == -1)
                    continue;
                minIndex = Math.min(minIndex, myIndex);
            }
            if (minIndex == -1 || minIndex >= index)
                break;
            else
                index = minIndex;
        }
        return str.substr(0, index);
    };
    /* ==================================================================
        REPLACERS
            - SUBSTITUTE
            - REPLACE_ALL
            - MISCELLANEOUS
    =====================================================================
        SUBSTITUTE
    ------------------------------------------------------------------ */
    /**
     * Substitute `{n}` tokens within the specified string.
     *
     * @param format The string to make substitutions in. This string can contain special tokens of the form
     *				 `{n}`, where *n* is a zero based index, that will be replaced with the additional parameters
        *				 found at that index if specified.
        * @param args Additional parameters that can be substituted in the *format* parameter at each
        *			   `{n}` location, where *n* is an integer (zero based) index value into the array of values
        *			   specified.
        *
        * @return New string with all of the `{n}` tokens replaced with the respective arguments specified.
        */
    StringUtil.substitute = function (format) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        while (true) {
            if (args.length == 0)
                break;
            var min_index = StringUtil._Fetch_substitute_index(format);
            if (min_index == Number.MAX_VALUE)
                break;
            format = StringUtil.replaceAll(format, "{" + min_index + "}", String(args[0]));
            args.shift();
        }
        return format;
    };
    /**
     * Substitute `{n}` tokens within the specified SQL-string.
     *
     * @param format The string to make substitutions in. This string can contain special tokens of the form
     *				 `{n}`, where *n* is a zero based index, that will be replaced with the additional parameters
        *				 found at that index if specified.
        * @param args Additional parameters that can be substituted in the *format* parameter at each
        *			   `{n}` location, where *n* is an integer (zero based) index value into the array of values
        *			   specified.
        *
        * @return New SQL-string with all of the `{n}` tokens replaced with the respective arguments specified.
        */
    StringUtil.substituteSQL = function (format) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        while (true) {
            if (args.length == 0)
                break;
            var element = args[0];
            var min_index = StringUtil._Fetch_substitute_index(format);
            if (min_index == Number.MAX_VALUE)
                break;
            var symbol = "{" + min_index + "}";
            if (element == null)
                format = StringUtil.replaceAll(format, symbol, "NULL");
            else if (typeof element == "boolean" || typeof element == "number")
                format = StringUtil.replaceAll(format, symbol, String(element));
            else if (typeof element == "string") {
                var str = StringUtil._Substitute_sql_string(element);
                format = StringUtil.replaceAll(format, symbol, str);
            }
            else if (element instanceof Array) {
            }
            else {
                if (element.toXML != undefined) {
                    var xml = element.toXML();
                    if (xml instanceof sxml_1.XML)
                        element = xml;
                }
                var str = element.toString();
                str = StringUtil._Substitute_sql_string(str);
                format = StringUtil.replaceAll(format, symbol, str);
            }
            args.shift();
        }
        return format;
    };
    /**
     * @hidden
     */
    StringUtil._Substitute_sql_string = function (str) {
        str = StringUtil.replaceAll(str, "\\", "\\\\");
        str = StringUtil.replaceAll(str, "'", "\\'");
        return "'" + str + "'";
    };
    /**
     * @hidden
     */
    StringUtil._Fetch_substitute_index = function (format) {
        var parenthesis_array = StringUtil.betweens(format, "{", "}");
        var min_index = Number.MAX_VALUE;
        for (var i = 0; i < parenthesis_array.length; i++) {
            var index = Number(parenthesis_array[i]);
            if (isNaN(index) == true)
                continue;
            min_index = Math.min(min_index, index);
        }
        return min_index;
    };
    StringUtil.replaceAll = function (str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (args.length == 2 && typeof args[0] == "string") {
            var before = args[0];
            var after = args[1];
            return str.split(before).join(after);
        }
        else {
            if (args.length == 0)
                return str;
            for (var i = 0; i < args.length; i++) {
                var pair = args[i];
                str = str.split(pair.first).join(pair.second);
            }
            return str;
        }
    };
    /* ------------------------------------------------------------------
        MISCELLANEOUS
    ------------------------------------------------------------------ */
    /**
     * Replace all HTML spaces to a literal space.
     *
     * @param str Target string to replace.
     */
    StringUtil.removeHTMLSpaces = function (str) {
        return StringUtil.replaceAll(str, new std.Pair("&nbsp;", " "), new std.Pair("\t", " "), new std.Pair("  ", " "));
    };
    /**
     * Repeat a string.
     *
     * Returns a string consisting of a specified string concatenated with itself a specified number of times.
     *
     * @param str The string to be repeated.
     * @param n The repeat count.
     *
     * @return The repeated string.
     */
    StringUtil.repeat = function (str, n) {
        var ret = "";
        for (var i = 0; i < n; i++)
            ret += str;
        return ret;
    };
    /* ==================================================================
        NUMBER FORMAT
            - NUMBER
            - PERCENT
    =====================================================================
        NUMBER
    ------------------------------------------------------------------ */
    /**
     * Number to formatted string with &quot;,&quot; sign.
     *
     * Returns a string converted from the number rounded off from specified precision with &quot;,&quot; symbols.
     *
     * @param val A number wants to convert to string.
     * @param precision Target precision of round off.
     *
     * @return A string who represents the number with roundoff and &quot;,&quot; symbols.
     */
    StringUtil.numberFormat = function (val, precision) {
        if (precision === void 0) { precision = 2; }
        var str = "";
        // FIRST, DO ROUND-OFF
        val = Math.round(val * Math.pow(10, precision));
        val = val / Math.pow(10, precision);
        // SEPERATE NUMBERS
        var is_negative = (val < 0);
        var natural = Math.floor(Math.abs(val));
        var fraction = Math.abs(val) - Math.floor(Math.abs(val));
        // NATURAL NUMBER
        if (natural == 0)
            str = "0";
        else {
            // NOT ZERO
            var cipher_count = Math.floor(Math.log(natural) / Math.log(10)) + 1;
            for (var i = 0; i <= cipher_count; i++) {
                var cipher = Math.floor(natural % Math.pow(10, i + 1));
                cipher = Math.floor(cipher / Math.pow(10, i));
                if (i == cipher_count && cipher == 0)
                    continue;
                // IS MULTIPLIER OF 3
                if (i > 0 && i % 3 == 0)
                    str = "," + str;
                // PUSH FRONT TO THE STRING
                str = cipher + str;
            }
        }
        // NEGATIVE SIGN
        if (is_negative == true)
            str = "-" + str;
        // ADD FRACTION
        if (precision > 0 && fraction != 0) {
            fraction = Math.round(fraction * Math.pow(10, precision));
            var zeros = precision - Math.floor(Math.log(fraction) / Math.log(10)) - 1;
            str += "." + StringUtil.repeat("0", zeros) + fraction;
        }
        return str;
    };
    StringUtil.percentFormat = function (val, precision) {
        if (precision === void 0) { precision = 2; }
        return StringUtil.numberFormat(val * 100, precision) + " %";
    };
    /* ------------------------------------------------------------------
        TRIM
    ------------------------------------------------------------------ */
    /**
     * An array containing whitespaces.
     */
    StringUtil.SPACE_ARRAY = [' ', '\t', '\r', '\n'];
    return StringUtil;
}());
exports.StringUtil = StringUtil;
//# sourceMappingURL=StringUtil.js.map