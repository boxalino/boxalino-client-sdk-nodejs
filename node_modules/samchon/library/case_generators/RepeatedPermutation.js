"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A repeated-permutation case generator.
 *
 * <sub>n</sub>��<sub>r</sub>
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var RepeatedPermutation = /** @class */ (function () {
    /* ---------------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------------- */
    /**
     * Construct from size of N and R.
     *
     * @param n Size of candidates.
     * @param r Size of elements of each case.
     */
    function RepeatedPermutation(n, r) {
        this.n_ = n;
        this.r_ = r;
        this.size_ = Math.pow(n, r);
        this.divider_array = new Array();
        for (var i = 0; i < r; i++) {
            var x = r - (i + 1);
            var val = Math.pow(n, x);
            this.divider_array.push(val);
        }
    }
    /* -----------------------------------------------------------
        ACCESSORS
    ----------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    RepeatedPermutation.prototype.size = function () {
        return this.size_;
    };
    /**
     * Get N, number of candidates.
     */
    RepeatedPermutation.prototype.n = function () {
        return this.n_;
    };
    /**
     * Get R, number of elements for each case.
     */
    RepeatedPermutation.prototype.r = function () {
        return this.r_;
    };
    /* -----------------------------------------------------------
        COMPUTATION
    ----------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    RepeatedPermutation.prototype.at = function (index) {
        var row = [];
        for (var i = 0; i < this.r_; i++) {
            var val = Math.floor(index / this.divider_array[i]) % this.n_;
            row.push(val);
        }
        return row;
    };
    return RepeatedPermutation;
}());
exports.RepeatedPermutation = RepeatedPermutation;
//# sourceMappingURL=RepeatedPermutation.js.map