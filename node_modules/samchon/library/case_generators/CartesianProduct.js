"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A cartesian-product case generator.
 *
 * A<sub>1</sub> X A<sub>2</sub> X ... X A<sub>n</sub>
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var CartesianProduct = /** @class */ (function () {
    /* -----------------------------------------------------------
        CONSTRUCTORS
    ----------------------------------------------------------- */
    /**
     * Initializer Constructor.
     *
     * @param digits Max number (size) of each digit.
     */
    function CartesianProduct() {
        var digits = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            digits[_i] = arguments[_i];
        }
        this.digits_ = digits;
        this.dividers_ = new Array(digits.length);
        this.size_ = 1;
        for (var i = digits.length - 1; i >= 0; i--) {
            this.dividers_[i] = this.size_;
            this.size_ *= digits[i];
        }
    }
    /* -----------------------------------------------------------
        ACCESSORS
    ----------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    CartesianProduct.prototype.size = function () {
        return this.size_;
    };
    /**
     * Get digits, Max number (size) of each digit.
     */
    CartesianProduct.prototype.digits = function () {
        return this.digits_;
    };
    /* -----------------------------------------------------------
        COMPUTATION
    ----------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    CartesianProduct.prototype.at = function (index) {
        var row = [];
        for (var i = 0; i < this.digits_.length; i++) {
            var val = Math.floor(index / this.dividers_[i]);
            val = val % this.digits_[i];
            row.push(val);
        }
        return row;
    };
    return CartesianProduct;
}());
exports.CartesianProduct = CartesianProduct;
//# sourceMappingURL=CartesianProduct.js.map