"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var IEntityGroup_1 = require("./IEntityGroup");
/**
 * @inheritdoc
 */
var EntityArray = /** @class */ (function (_super) {
    __extends(EntityArray, _super);
    function EntityArray() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* ------------------------------------------------------------------
        CONSTRUCTORS
    ------------------------------------------------------------------ */
    // using super::super;
    /**
     * @inheritdoc
     */
    EntityArray.prototype.construct = function (xml) {
        IEntityGroup_1.IEntityGroup.construct(this, xml);
    };
    /* ------------------------------------------------------------------
        GETTERS
    ------------------------------------------------------------------ */
    /**
     * @inheritdoc
     */
    EntityArray.prototype.key = function () {
        return "";
    };
    /**
     * @inheritdoc
     */
    EntityArray.prototype.has = function (key) {
        return IEntityGroup_1.IEntityGroup.has(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityArray.prototype.count = function (key) {
        return IEntityGroup_1.IEntityGroup.count(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityArray.prototype.get = function (key) {
        return IEntityGroup_1.IEntityGroup.get(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityArray.prototype.toXML = function () {
        return IEntityGroup_1.IEntityGroup.toXML(this, "length");
    };
    return EntityArray;
}(std.Vector));
exports.EntityArray = EntityArray;
/**
 * @inheritdoc
 */
var EntityList = /** @class */ (function (_super) {
    __extends(EntityList, _super);
    function EntityList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* ------------------------------------------------------------------
        CONSTRUCTORS
    ------------------------------------------------------------------ */
    // using super::super;
    /**
     * @inheritdoc
     */
    EntityList.prototype.construct = function (xml) {
        IEntityGroup_1.IEntityGroup.construct(this, xml);
    };
    /* ------------------------------------------------------------------
        GETTERS
    ------------------------------------------------------------------ */
    /**
     * @inheritdoc
     */
    EntityList.prototype.key = function () {
        return "";
    };
    /**
     * @inheritdoc
     */
    EntityList.prototype.has = function (key) {
        return IEntityGroup_1.IEntityGroup.has(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityList.prototype.count = function (key) {
        return IEntityGroup_1.IEntityGroup.count(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityList.prototype.get = function (key) {
        return IEntityGroup_1.IEntityGroup.get(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityList.prototype.toXML = function () {
        return IEntityGroup_1.IEntityGroup.toXML(this);
    };
    return EntityList;
}(std.List));
exports.EntityList = EntityList;
/**
 * @inheritdoc
 */
var EntityDeque = /** @class */ (function (_super) {
    __extends(EntityDeque, _super);
    function EntityDeque() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* ------------------------------------------------------------------
        CONSTRUCTORS
    ------------------------------------------------------------------ */
    // using super::super;
    /**
     * @inheritdoc
     */
    EntityDeque.prototype.construct = function (xml) {
        IEntityGroup_1.IEntityGroup.construct(this, xml);
    };
    /* ------------------------------------------------------------------
        GETTERS
    ------------------------------------------------------------------ */
    /**
     * @inheritdoc
     */
    EntityDeque.prototype.key = function () {
        return "";
    };
    /**
     * @inheritdoc
     */
    EntityDeque.prototype.has = function (key) {
        return IEntityGroup_1.IEntityGroup.has(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityDeque.prototype.count = function (key) {
        return IEntityGroup_1.IEntityGroup.count(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityDeque.prototype.get = function (key) {
        return IEntityGroup_1.IEntityGroup.get(this, key);
    };
    /**
     * @inheritdoc
     */
    EntityDeque.prototype.toXML = function () {
        return IEntityGroup_1.IEntityGroup.toXML(this);
    };
    return EntityDeque;
}(std.Deque));
exports.EntityDeque = EntityDeque;
//# sourceMappingURL=EntityArray.js.map