"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var IEntity_1 = require("./IEntity");
/**
 * @hidden
 */
var IEntityGroup;
(function (IEntityGroup) {
    /* ------------------------------------------------------------------
        ENTITY <-> XML CONVERSION
    ------------------------------------------------------------------ */
    /**
     * @hidden
     */
    function construct(entityGroup, xml) {
        var prohibited_names = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            prohibited_names[_i - 2] = arguments[_i];
        }
        entityGroup.clear();
        // MEMBER VARIABLES
        IEntity_1.IEntity.construct.apply(IEntity_1.IEntity, __spread([entityGroup, xml], prohibited_names));
        // CHILDREN
        if (xml.has(entityGroup.CHILD_TAG()) == false)
            return;
        var children = new std.Vector();
        var xml_list = xml.get(entityGroup.CHILD_TAG());
        for (var i = 0; i < xml_list.size(); i++) {
            var child = entityGroup.createChild(xml_list.at(i));
            if (child == null)
                continue;
            child.construct(xml_list.at(i));
            children.push(child);
        }
        entityGroup.assign(children.begin(), children.end());
    }
    IEntityGroup.construct = construct;
    /**
     * @hidden
     */
    function toXML(group) {
        var prohibited_names = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            prohibited_names[_i - 1] = arguments[_i];
        }
        // MEMBERS
        var xml = IEntity_1.IEntity.toXML.apply(IEntity_1.IEntity, __spread([group], prohibited_names));
        // CHILDREN
        for (var it = group.begin(); !it.equals(group.end()); it = it.next())
            xml.push(it.value.toXML());
        return xml;
    }
    IEntityGroup.toXML = toXML;
    /* ------------------------------------------------------------------
        ACCESSORS
    ------------------------------------------------------------------ */
    function has(entityGroup, key) {
        return std.any_of(entityGroup.begin(), entityGroup.end(), function (entity) {
            return std.equal_to(entity.key(), key);
        });
    }
    IEntityGroup.has = has;
    function count(entityGroup, key) {
        return std.count_if(entityGroup.begin(), entityGroup.end(), function (entity) {
            return std.equal_to(entity.key(), key);
        });
    }
    IEntityGroup.count = count;
    function get(entityGroup, key) {
        for (var it = entityGroup.begin(); !it.equals(entityGroup.end()); it = it.next())
            if (std.equal_to(it.value.key(), key) == true)
                return it.value;
        throw new std.OutOfRange("out of range");
    }
    IEntityGroup.get = get;
})(IEntityGroup = exports.IEntityGroup || (exports.IEntityGroup = {}));
//# sourceMappingURL=IEntityGroup.js.map