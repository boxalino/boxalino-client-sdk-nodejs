"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sxml_1 = require("sxml");
/**
 * @hidden
 */
var IEntity;
(function (IEntity) {
    function construct(entity, xml) {
        var prohibited_names = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            prohibited_names[_i - 2] = arguments[_i];
        }
        // MEMBER VARIABLES
        //  - ATOMIC ONLY; STRING, NUMBER AND BOOLEAN
        var property_map = xml.getPropertyMap();
        for (var it = property_map.begin(); !it.equals(property_map.end()); it = it.next()) {
            if (entity[it.first] == undefined)
                continue;
            var prohibited = false;
            for (var i = 0; i < prohibited_names.length; i++)
                if (prohibited_names[i] == it.first) {
                    prohibited = true;
                    break;
                }
            if (prohibited == true)
                continue;
            if (typeof entity[it.first] == "string")
                entity[it.first] = it.second;
            else if (typeof entity[it.first] == "number")
                entity[it.first] = Number(it.second);
            else if (typeof entity[it.first] == "boolean")
                entity[it.first] = (it.second != "0" && it.second != "false");
        }
    }
    IEntity.construct = construct;
    function toXML(entity) {
        var prohibited_names = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            prohibited_names[_i - 1] = arguments[_i];
        }
        var xml = new sxml_1.XML();
        xml.setTag(entity.TAG());
        // MEMBER VARIABLES
        //  - ATOMIC ONLY; STRING, NUMBER AND BOOLEAN
        for (var key in entity)
            if (typeof key == "string"
                && (typeof entity[key] == "string"
                    || typeof entity[key] == "number"
                    || typeof entity[key] == "boolean")
                && entity.hasOwnProperty(key)) {
                if (key == "" || key.charAt(0) == "_" || key.charAt(key.length - 1) == "_")
                    continue;
                var prohibited = false;
                for (var i = 0; i < prohibited_names.length; i++)
                    if (prohibited_names[i] == key) {
                        prohibited = true;
                        break;
                    }
                if (prohibited == true)
                    continue;
                // ATOMIC
                xml.setProperty(key, String(entity[key]));
            }
        return xml;
    }
    IEntity.toXML = toXML;
})(IEntity = exports.IEntity || (exports.IEntity = {}));
//# sourceMappingURL=IEntity.js.map