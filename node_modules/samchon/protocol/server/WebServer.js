"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ws = require("websocket");
var http = require("http");
var WebClientDriver_1 = require("../communicator/client_driver/WebClientDriver");
/**
 * A web server.
 *
 * The {@link WebServer} is an abstract class designed to open a server and accept clients who are following
 * web-socket protocol. Extends this {@link WebServer} class and overrides {@link addClient addClient()} method to
 * define what to do with newly connected {@link WebClientDriver remote clients}.
 *
 * #### [Inherited] {@link IServer}
 * @copydoc IServer
 */
var WebServer = /** @class */ (function () {
    /* -------------------------------------------------------------------
        CONSTRUCTORS
    ------------------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function WebServer() {
        this.sequence_ = 0;
    }
    /* -------------------------------------------------------------------
        PROCEDURES
    ------------------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    WebServer.prototype.open = function (port) {
        this.my_port_ = port;
        this.http_server_ = http.createServer();
        this.http_server_.listen(port);
        var ws_server = new ws.server({ httpServer: this.http_server_ });
        ws_server.on("request", this._Handle_request.bind(this));
    };
    /**
     * @inheritdoc
     */
    WebServer.prototype.close = function () {
        this.http_server_.close();
    };
    /**
     * @hidden
     */
    WebServer.prototype._Handle_request = function (request) {
        //--------
        // Handle request from a client system.
        // 
        // This method "handle_request()" will be called when a client is connected. It will call an abstract method 
        // "addClient()" who handles an accepted client. If the newly connected client doesn't have its own session 
        // id, then a new session id will be issued.
        // 
        // @param request Requested header.
        //--------
        var path = request.resource;
        var session_id = this._Fetch_session_id(request.cookies);
        var connection = request.accept("", request.origin, [{ name: "SESSION_ID", value: session_id }]);
        var driver = new WebClientDriver_1.WebClientDriver(connection, path, session_id);
        this.addClient(driver);
    };
    /**
     * @hidden
     */
    WebServer.prototype._Fetch_session_id = function (cookies) {
        //--------
        // Fetch session id from a newly connected.
        // 
        // Queries ordinary session id from cookies of a newly connected client. If the client has not, a new session 
        // id will be issued.
        // 
        // @param cookies Cookies from the remote client.
        // @return Session id
        //--------
        for (var i = 0; i < cookies.length; i++)
            if (cookies[i].name == "SESSION_ID")
                return cookies[i].value;
        return this._Issue_session_id();
    };
    /**
     * @hidden
     */
    WebServer.prototype._Issue_session_id = function () {
        // Issue a new session id.
        var port = this.my_port_;
        var uid = ++this.sequence_;
        var linux_time = new Date().getTime();
        var rand = Math.floor(Math.random() * 0xffffffff);
        return port.toString(16) + uid.toString(16) + linux_time.toString(16) + rand.toString(16);
    };
    return WebServer;
}());
exports.WebServer = WebServer;
//# sourceMappingURL=WebServer.js.map