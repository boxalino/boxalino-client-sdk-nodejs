"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sxml_1 = require("sxml");
var Entity_1 = require("../entity/Entity");
/**
 * A parameter belongs to an Invoke.
 *
 * ![Class Diagram](http://samchon.github.io/framework/images/design/ts_class_diagram/protocol_message_protocol.png)
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var InvokeParameter = /** @class */ (function (_super) {
    __extends(InvokeParameter, _super);
    /* -------------------------------------------------------------------
        CONSTRUCTORS
    ------------------------------------------------------------------- */
    function InvokeParameter() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        /**
         * Name of the parameter.
         *
         * @details Optional property, can be omitted.
         */
        _this.name = "";
        /**
         * Type of the parameter.
         */
        _this.type = "";
        /**
         * Value of the parameter.
         */
        _this.value = null;
        // DEFAULT CONSTRUCTOR
        if (args.length == 0)
            return _this;
        // INITIALIZATION CONSTRUCTOR
        if (args.length == 1) {
            _this.name = "";
            _this.setValue(args[0]);
        }
        else {
            _this.name = args[0];
            _this.setValue(args[1]);
        }
        return _this;
    }
    /**
     * @inheritdoc
     */
    InvokeParameter.prototype.construct = function (xml) {
        this.name = (xml.hasProperty("name")) ? xml.getProperty("name") : "";
        this.type = xml.getProperty("type");
        if (this.type == "XML")
            this.value = xml.begin().second.front();
        else if (this.type == "boolean") {
            var value = xml.getValue();
            this.value = (value != "0" && value != "false"); // Do not use the Boolean(value);
        }
        else if (this.type == "number")
            this.value = Number(xml.getValue());
        else if (this.type == "string")
            this.value = xml.getValue();
    };
    InvokeParameter.prototype.setValue = function (value) {
        this.value = value;
        if (value instanceof sxml_1.XML)
            this.type = "XML";
        else if (value instanceof Uint8Array)
            this.type = "ByteArray";
        else
            this.type = typeof value;
    };
    /* -------------------------------------------------------------------
        GETTERS
    ------------------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    InvokeParameter.prototype.key = function () {
        return this.name;
    };
    /**
     * Get name.
     */
    InvokeParameter.prototype.getName = function () {
        return this.name;
    };
    /**
     * Get type.
     */
    InvokeParameter.prototype.getType = function () {
        return this.type;
    };
    /**
     * Get value.
     */
    InvokeParameter.prototype.getValue = function () {
        return this.value;
    };
    /* -------------------------------------------------------------------
        EXPORTERS
    ------------------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    InvokeParameter.prototype.TAG = function () {
        return "parameter";
    };
    /**
     * @inheritdoc
     */
    InvokeParameter.prototype.toXML = function () {
        var xml = new sxml_1.XML();
        xml.setTag(this.TAG());
        if (this.name != "")
            xml.setProperty("name", this.name);
        xml.setProperty("type", this.type);
        // NOT CONSIDERED ABOUT THE BINARY DATA
        if (this.type == "XML")
            xml.push(this.value);
        else if (this.type != "ByteArray")
            xml.setValue(this.value + "");
        return xml;
    };
    return InvokeParameter;
}(Entity_1.Entity));
exports.InvokeParameter = InvokeParameter;
//# sourceMappingURL=InvokeParameter.js.map