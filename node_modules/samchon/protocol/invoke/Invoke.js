"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EntityArray_1 = require("../entity/EntityArray");
var InvokeParameter_1 = require("./InvokeParameter");
/**
 * Standard message of network I/O.
 *
 * {@link Invoke} is a class used in network I/O in protocol package of Samchon Framework.
 *
 * The Invoke message has an XML structure like the result screen of provided example in below.
 * We can enjoy lots of benefits by the normalized and standardized message structure used in
 * network I/O.
 *
 * The greatest advantage is that we can make any type of network system, even how the system
 * is enourmously complicated. As network communication message is standardized, we only need to
 * concentrate on logical relationships between network systems. We can handle each network system
 * like a object (class) in OOD. And those relationships can be easily designed by using design
 * pattern.
 *
 * In Samchon Framework, you can make any type of network system with basic componenets
 * (IProtocol, IServer and ICommunicator) by implemens or inherits them, like designing
 * classes of S/W architecture.
 *
 * ![Class Diagram](http://samchon.github.io/framework/images/design/ts_class_diagram/protocol_message_protocol.png)
 *
 * @see {@link IProtocol}
 * @author Jeongho Nam <http://samchon.org>
 */
var Invoke = /** @class */ (function (_super) {
    __extends(Invoke, _super);
    function Invoke() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        /**
         * Listener, represent function's name.
         */
        _this.listener = "";
        if (args.length == 0) {
            _this.listener = "";
        }
        else {
            _this.listener = args[0];
            for (var i = 1; i < args.length; i++)
                _this.push_back(new InvokeParameter_1.InvokeParameter(args[i]));
        }
        return _this;
    }
    /**
     * @inheritdoc
     */
    Invoke.prototype.createChild = function (xml) {
        return new InvokeParameter_1.InvokeParameter();
    };
    /* -------------------------------------------------------------------
        GETTERS
    ------------------------------------------------------------------- */
    /**
     * Get listener.
     */
    Invoke.prototype.getListener = function () {
        return this.listener;
    };
    /**
     * Get arguments for Function.apply().
     *
     * @return An array containing values of the contained parameters.
     */
    Invoke.prototype.getArguments = function () {
        var args = [];
        for (var i = 0; i < this.size(); i++)
            if (this.at(i).getName() == "_History_uid")
                continue;
            else
                args.push(this.at(i).getValue());
        return args;
    };
    Invoke.prototype.apply = function (thisArg, func) {
        if (func === void 0) { func = null; }
        var argArray = this.getArguments();
        if (func == null) {
            if (!(this.listener in thisArg && thisArg[this.listener] instanceof Function))
                return false;
            func = thisArg[this.listener];
        }
        func.apply(thisArg, argArray);
        return true;
    };
    /* -------------------------------------------------------------------
        EXPORTERS
    ------------------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    Invoke.prototype.TAG = function () {
        return "invoke";
    };
    /**
     * @inheritdoc
     */
    Invoke.prototype.CHILD_TAG = function () {
        return "parameter";
    };
    return Invoke;
}(EntityArray_1.EntityArray));
exports.Invoke = Invoke;
//# sourceMappingURL=Invoke.js.map