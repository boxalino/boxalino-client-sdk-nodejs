"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WebCommunicator_1 = require("../communicator/WebCommunicator");
/**
 * Communicator with remote web-client.
 *
 * {@link WebClientDriver} is a class taking full charge of network communication with remote client who follows
 * Web-socket protocol. This {@link WebClientDriver} object is always created by {@link WebServer} class. When you
 * got this {@link WebClientDriver} object from the {@link WebServer.addClient WebServer.addClient()}, then specify
 * {@link IProtocol listener} with the {@link WebClientDriver.listen WebClientDriver.listen()} method.
 *
 * Unlike other protocol, Web-socket protocol's clients notify two parameters on their connection;
 * {@link getSessionID session-id} and {@link getPath path}. The {@link getSessionID session-id} can be used to
 * identify *user* of each client, and the {@link getPath path} can be used which type of *service* that client wants.
 * In {@link service} module, you can see the best utilization case of them.
 * - {@link service.User}: utlization of the {@link getSessionID session-id}.
 * - {@link service.Service}: utilization of the {@link getPath path}.
 *
 * #### [Inherited] {@link IClientDriver}
 * @copydoc IClientDriver
 */
var WebClientDriver = /** @class */ (function (_super) {
    __extends(WebClientDriver, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Initialization Constructor.
     *
     * @param connection Connection driver, a socket for web-socket.
     * @param path Requested path.
     * @param session_id Session ID, an identifier of the remote client.
     */
    function WebClientDriver(connection, path, session_id) {
        var _this = _super.call(this) || this;
        _this["connection_"] = connection;
        _this.path_ = path;
        _this.session_id_ = session_id;
        _this.listening_ = false;
        return _this;
    }
    /**
     * @inheritdoc
     */
    WebClientDriver.prototype.listen = function (listener) {
        this.listener_ = listener;
        if (this.listening_ == true)
            return;
        this.listening_ = true;
        this["connection_"].on("message", this["_Handle_message"].bind(this));
        this["connection_"].on("close", this._Handle_close.bind(this));
        this["connection_"].on("error", this._Handle_close.bind(this));
    };
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * Get requested path.
     */
    WebClientDriver.prototype.getPath = function () {
        return this.path_;
    };
    /**
     * Get session ID, an identifier of the remote client.
     */
    WebClientDriver.prototype.getSessionID = function () {
        return this.session_id_;
    };
    return WebClientDriver;
}(WebCommunicator_1.WebCommunicator));
exports.WebClientDriver = WebClientDriver;
//# sourceMappingURL=WebClientDriver.js.map