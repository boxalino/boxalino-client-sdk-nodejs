"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DedicatedWorkerCommunicator_1 = require("../communicator/DedicatedWorkerCommunicator");
/**
 * Communicator with master web-browser.
 *
 * {@link DedicatedWorkerClientDriver} is a class taking full charge of network communication with web browsers. This
 * {@link DedicatedWorkerClientDriver} object is always created by {@link DedicatedWorkerServer} class. When you got
 * this {@link DedicatedWorkerClientDriver} object from
 * {@link DedicatedWorkerServer.addClient DedicatedWorkerServer.addClient()}, then specify {@link IProtocol listener}
 * with the {@link DedicatedWorkerClientDriver.listen DedicatedWorkerClientDriver.listen()} method.
 *
 * #### Why DedicatedWorker be a server?
 * In JavaScript environment, there's no way to implement multi-threading function. Instead, JavaScript supports the
 * **Worker**, creating a new process. However, the **Worker** does not shares memory addresses. To integrate the
 * **Worker** with its master, only communication with string or binary data is allowed. Doesn't it seem like a network
 * communication? Furthermore, there's not any difference between the worker communication and network communication.
 * It's the reason why Samchon Framework considers the **Worker** as a network node.
 *
 * The class {@link DedicatedWorkerCommunicator} is designed make such relationship. From now on, DedicatedWorker is a
 * {@link DedicatedWorkerServer server} and {@link DedicatedWorkerServerConnector browser} is a client. Integrate the
 * server and clients with this {@link DedicatedWorkerCommunicator}.
 *
 * #### [Inherited] {@link IClientDriver}
 * @copydoc IClientDriver
 */
var DedicatedWorkerClientDriver = /** @class */ (function (_super) {
    __extends(DedicatedWorkerClientDriver, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function DedicatedWorkerClientDriver() {
        var _this = _super.call(this) || this;
        onmessage = _this._Handle_message.bind(_this);
        _this.connected_ = true;
        return _this;
    }
    /**
     * @inheritdoc
     */
    DedicatedWorkerClientDriver.prototype.listen = function (listener) {
        this.listener_ = listener;
    };
    /**
     * @inheritdoc
     */
    DedicatedWorkerClientDriver.prototype.close = function () {
        close();
    };
    /* ---------------------------------------------------------
        INVOKE MESSAGE CHAIN
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    DedicatedWorkerClientDriver.prototype.sendData = function (invoke) {
        postMessage(invoke.toXML().toString(), "");
        for (var i = 0; i < invoke.size(); i++)
            if (invoke.at(i).getType() == "ByteArray")
                postMessage(invoke.at(i).getValue(), "");
    };
    return DedicatedWorkerClientDriver;
}(DedicatedWorkerCommunicator_1.DedicatedWorkerCommunicator));
exports.DedicatedWorkerClientDriver = DedicatedWorkerClientDriver;
//# sourceMappingURL=DedicatedWorkerClientDriver.js.map