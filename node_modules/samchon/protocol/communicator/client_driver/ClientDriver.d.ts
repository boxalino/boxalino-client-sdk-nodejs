import { IClientDriver } from "../IClientDriver";
import { Communicator } from "../communicator/Communicator";
import { IProtocol } from "../../invoke/IProtocol";
/**
 * Communicator with remote client.
 *
 * {@link ClientDriver} is a class taking full charge of network communication with remote client who follows Samchon
 * Framework's own protocol. This {@link ClientDriver} object is always created by {@link Server} class. When you got
 * this {@link ClientDriver} object from the {@link Server.addClient Server.addClient()}, then specify
 * {@link IProtocol listener} with the {@link ClientDriver.listen ClientDriver.listen()} method.
 *
 * #### [Inherited] {@link IClientDriver}
 * @copydoc IClientDriver
 */
export declare class ClientDriver extends Communicator implements IClientDriver {
    /**
     * Construct from a socket.
     */
    constructor(socket: any);
    /**
     * @inheritdoc
     */
    listen(listener: IProtocol): void;
}
