import { Communicator } from "../communicator/Communicator";
import { IServerConnector } from "../IServerConnector";
import { IProtocol } from "../../invoke/IProtocol";
/**
 * Server connnector.
 *
 * {@link ServerConnector} is a class connecting to remote server who follows Samchon Framework's own protocol and
 * taking full charge of network communication with the remote server. Create a {@link ServerConnector} instance from
 * the {@IProtocol listener} and call the {@link connect connect()} method.
 *
 * #### [Inherited] {@link IServerConnector}
 * @copydoc IServerConnector
 */
export declare class ServerConnector extends Communicator implements IServerConnector {
    /**
     * @inheritdoc
     */
    onConnect: Function;
    /**
     * Construct from *listener*.
     *
     * @param listener A listener object to listen replied message from newly connected client in
     *				   {@link IProtocol.replyData replyData()} as an {@link Invoke} object.
        */
    constructor(listener: IProtocol);
    /**
     * @inheritdoc
     */
    connect(ip: string, port: number): void;
    /**
     * @hidden
     */
    private _Handle_connect;
    /**
     * @hidden
     */
    private _Send_dummy_packet_repeatedly;
}
