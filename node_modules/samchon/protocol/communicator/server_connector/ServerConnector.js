"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var net = require("net");
var Communicator_1 = require("../communicator/Communicator");
/**
 * Server connnector.
 *
 * {@link ServerConnector} is a class connecting to remote server who follows Samchon Framework's own protocol and
 * taking full charge of network communication with the remote server. Create a {@link ServerConnector} instance from
 * the {@IProtocol listener} and call the {@link connect connect()} method.
 *
 * #### [Inherited] {@link IServerConnector}
 * @copydoc IServerConnector
 */
var ServerConnector = /** @class */ (function (_super) {
    __extends(ServerConnector, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Construct from *listener*.
     *
     * @param listener A listener object to listen replied message from newly connected client in
     *				   {@link IProtocol.replyData replyData()} as an {@link Invoke} object.
        */
    function ServerConnector(listener) {
        var _this = _super.call(this, listener) || this;
        _this.connected_ = false;
        return _this;
    }
    /**
     * @inheritdoc
     */
    ServerConnector.prototype.connect = function (ip, port) {
        this["socket_"] = net.connect({ host: ip, port: port }, this._Handle_connect.bind(this));
    };
    /* ---------------------------------------------------------
        HANDLERS
    --------------------------------------------------------- */
    /**
     * @hidden
     */
    ServerConnector.prototype._Handle_connect = function () {
        this.connected_ = true;
        this._Start_listen();
        this._Send_dummy_packet_repeatedly();
        if (this.onConnect != null)
            this.onConnect();
    };
    /**
     * @hidden
     */
    ServerConnector.prototype._Send_dummy_packet_repeatedly = function () {
        setInterval(function () {
            // WRITE A HEADER BUFFER WHICH MEANS CONTENT SIZE IS ZERO.
            var packet = new Buffer(8);
            packet.writeUInt32BE(0, 0);
            packet.writeUInt32BE(0, 4);
            // SEND
            try {
                this["socket_"].write(packet);
            }
            catch (exception) { // REPEAT IT UNTIL DISCONNECTION
                return;
            }
        }.bind(this), 5000);
    };
    return ServerConnector;
}(Communicator_1.Communicator));
exports.ServerConnector = ServerConnector;
//# sourceMappingURL=ServerConnector.js.map