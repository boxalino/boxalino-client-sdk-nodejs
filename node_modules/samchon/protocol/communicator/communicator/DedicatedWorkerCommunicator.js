"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _CommunicatorBase_1 = require("./_CommunicatorBase");
/**
 * A communicator for shared worker.
 *
 * {@link DedicatedWorkerCommunicator} is an abstract class for communication between DedicatedWorker and Web-browser.
 * This {@link DedicatedWorkerCommunicator} is specified to {@link DedicatedWorkerServerConnector} and
 * {@link DedicatedWorkerClientDriver} whether the remote system is a server (that my system is connecting to) or a
 * client (a client conneting to to my server).
 *
 * #### Why DedicatedWorker be a server?
 * In JavaScript environment, there's no way to implement multi-threading function. Instead, JavaScript supports the
 * **Worker**, creating a new process. However, the **Worker** does not shares memory addresses. To integrate the
 * **Worker** with its master, only communication with string or binary data is allowed. Doesn't it seem like a network
 * communication? Furthermore, there's not any difference between the worker communication and network communication.
 * It's the reason why Samchon Framework considers the **Worker** as a network node.
 *
 * The class {@link DedicatedWorkerCommunicator} is designed make such relationship. From now on, DedicatedWorker is a
 * {@link DedicatedWorkerServer server} and {@link DedicatedWorkerServerConnector browser} is a client. Integrate the
 * server and clients with this {@link DedicatedWorkerCommunicator}.
 *
 * #### [Inherited] {@link ICommunicator}
 * @copydoc ICommunicator
 */
var DedicatedWorkerCommunicator = /** @class */ (function (_super) {
    __extends(DedicatedWorkerCommunicator, _super);
    function DedicatedWorkerCommunicator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @hidden
     */
    DedicatedWorkerCommunicator.prototype._Handle_message = function (event) {
        if (this._Is_binary_invoke() == false)
            this._Handle_string(event.data);
        else
            this._Handle_binary(event.data);
    };
    return DedicatedWorkerCommunicator;
}(_CommunicatorBase_1._CommunicatorBase));
exports.DedicatedWorkerCommunicator = DedicatedWorkerCommunicator;
//# sourceMappingURL=DedicatedWorkerCommunicator.js.map