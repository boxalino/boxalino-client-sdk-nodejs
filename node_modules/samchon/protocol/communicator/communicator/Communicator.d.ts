import { _CommunicatorBase } from "./_CommunicatorBase";
import { Invoke } from "../../invoke/Invoke";
/**
 * A communicator following Samchon Framework's own protocol.
 *
 * {@link Communicator} is an abstract class following Samchon Framework's own protocol. This {@link Communicator}
 * class is specified to {@link ServerConnector} and {@link ClientDriver} whether the remote system is a server (that
 * my system is connecting to) or a client (a client conneting to to my server).
 *
 * Note that, if one of this or remote system is web-browser based, then you don't have to use this
 * {@link Communicator} class who follows Samchon Framework's own protocol. Web-browser supports only Web-socket
 * protocol. Thus in that case, you have to use {@link WebCommunicator} instead.
 *
 * #### [Inherited] {@link ICommunicator}
 * @copydoc ICommunicator
 */
export declare abstract class Communicator extends _CommunicatorBase {
    /**
     * @hidden
     */
    private socket_;
    /**
     * @hidden
     */
    private header_bytes_;
    /**
     * @hidden
     */
    private data_;
    /**
     * @hidden
     */
    private data_index_;
    /**
     * @hidden
     */
    private listening_;
    /**
     * @inheritdoc
     */
    close(): void;
    /**
     * @hidden
     */
    protected _Start_listen(): void;
    /**
     * @hidden
     */
    private _Handle_error;
    /**
     * @hidden
     */
    private _Handle_close;
    /**
     * @inheritdoc
     */
    sendData(invoke: Invoke): void;
    /**
     * @hidden
     */
    private _Listen_piece;
    /**
     * @hidden
     */
    private _Listen_header;
    /**
     * @hidden
     */
    private _Listen_data;
}
