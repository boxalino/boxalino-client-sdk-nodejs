import { IProtocol } from "../../invoke/IProtocol";
import { ICommunicator } from "../ICommunicator";
import { Invoke } from "../../invoke/Invoke";
/**
 * @hidden
 */
export declare abstract class _CommunicatorBase implements ICommunicator {
    /**
     * @hidden
     */
    protected listener_: IProtocol;
    /**
     * @inheritdoc
     */
    onClose: Function;
    /**
     * @hidden
     */
    protected connected_: boolean;
    /**
     * @hidden
     */
    private binary_invoke_;
    /**
     * @hidden
     */
    private binary_parameters_;
    /**
     * @hidden
     */
    private unhandled_invokes_;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Construct from *listener*.
     *
     * @param listener An {@link IProtocol} object to listen {@link Invoke} messages.
     */
    constructor(listener: IProtocol);
    /**
     * @inheritdoc
     */
    abstract close(): void;
    /**
     * @inheritdoc
     */
    isConnected(): boolean;
    /**
     * @hidden
     */
    protected _Is_binary_invoke(): boolean;
    /**
     * @inheritdoc
     */
    abstract sendData(invoke: Invoke): void;
    /**
     * @inheritdoc
     */
    replyData(invoke: Invoke): void;
    /**
     * @hidden
     */
    protected _Handle_string(str: string): void;
    /**
     * @hidden
     */
    protected _Handle_binary(binary: Uint8Array): void;
}
