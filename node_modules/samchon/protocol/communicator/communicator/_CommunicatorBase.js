"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var Invoke_1 = require("../../invoke/Invoke");
var sxml_1 = require("sxml");
/**
 * @hidden
 */
var _CommunicatorBase = /** @class */ (function () {
    function _CommunicatorBase(listener) {
        if (listener === void 0) { listener = null; }
        // BASIC MEMBERS
        this.listener_ = listener;
        this.onClose = null;
        // BINARY INVOKE MEMBERS
        this.binary_invoke_ = null;
        this.binary_parameters_ = new std.Queue();
        this.unhandled_invokes_ = new std.Deque();
    }
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    _CommunicatorBase.prototype.isConnected = function () {
        return this.connected_;
    };
    /**
     * @hidden
     */
    _CommunicatorBase.prototype._Is_binary_invoke = function () {
        return (this.binary_invoke_ != null);
    };
    /**
     * @inheritdoc
     */
    _CommunicatorBase.prototype.replyData = function (invoke) {
        if (this.listener_ == null)
            this.unhandled_invokes_.push_back(invoke);
        else {
            if (this.listener_["_Reply_data"] instanceof Function)
                this.listener_["_Reply_data"](invoke);
            else
                this.listener_.replyData(invoke);
        }
    };
    /**
     * @hidden
     */
    _CommunicatorBase.prototype._Handle_string = function (str) {
        // REPLIED DATA IS CLEARY BE AN INVOKE MESSAGE
        var invoke = new Invoke_1.Invoke();
        invoke.construct(new sxml_1.XML(str));
        for (var i = 0; i < invoke.size(); i++) {
            var parameter = invoke.at(i);
            if (parameter.getType() != "ByteArray")
                continue;
            if (this.binary_invoke_ == null)
                this.binary_invoke_ = invoke; // INIT BINARY_INVOKE
            this.binary_parameters_.push(parameter); // ENROLL TO PARAMETERS' QUEUE
        }
        // NO BINARY, THEN REPLY DIRECTLY
        if (this.binary_invoke_ == null)
            this.replyData(invoke);
    };
    /**
     * @hidden
     */
    _CommunicatorBase.prototype._Handle_binary = function (binary) {
        // FETCH A PARAMETER
        var parameter = this.binary_parameters_.front();
        {
            parameter.setValue(binary);
        }
        this.binary_parameters_.pop();
        if (this.binary_parameters_.empty() == true) {
            // NO BINARY PARAMETER LEFT,
            var invoke = this.binary_invoke_;
            this.binary_invoke_ = null;
            // THEN REPLY
            this.replyData(invoke);
        }
    };
    return _CommunicatorBase;
}());
exports._CommunicatorBase = _CommunicatorBase;
//# sourceMappingURL=_CommunicatorBase.js.map