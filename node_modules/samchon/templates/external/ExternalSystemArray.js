"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var EntityCollection_1 = require("../../protocol/entity/EntityCollection");
/**
 * An array and manager of {@link ExternalSystem external system drivers}.
 *
 * The {@link ExternalSystemArray} is an abstract class containing and managing external system drivers,
 * {@link ExternalSystem} objects. Within framewokr of network, {@link ExternalSystemArray} represents your system
 * and children {@link ExternalSystem} objects represent remote, external systems connected with your system.
 * With this {@link ExternalSystemArray}, you can manage multiple external systems as a group.
 *
 * You can specify this {@link ExternalSystemArray} class to be *a server accepting external clients* or
 * *a client connecting to external servers*. Even both of them is also possible.
 *
 * - {@link ExternalClientArray}: A server accepting {@link ExternalSystem external clients}.
 * - {@link ExternalServerArray}: A client connecting to {@link ExternalServer external servers}.
 * - {@link ExternalServerClientArray}: Both of them. Accepts {@link ExternalSystem external clients} and connects to
 *   {@link ExternalServer external servers} at the same time.
 *
 * <a href="http://samchon.github.io/framework/images/design/ts_class_diagram/templates_external_system.png"
 *		  target="_blank">
 *	<img src="http://samchon.github.io/framework/images/design/ts_class_diagram/templates_external_system.png"
 *		 style="max-width: 100%" />
 * </a>
 *
 * #### Proxy Pattern
 * The {@link ExternalSystemArray} class can use *Proxy Pattern*. In framework within user, which
 * {@link ExternalSystem external system} is connected with {@link ExternalSystemArray this system}, it's not
 * important. Only interested in user's perspective is *which can be done*.
 *
 * By using the *logical proxy*, user dont't need to know which {@link ExternalSystemRole role} is belonged
 * to which {@link ExternalSystem system}. Just access to a role directly from {@link ExternalSystemArray.getRole}.
 * Sends and receives {@link Invoke} message via the {@link ExternalSystemRole role}.
 *
 * <ul>
 *	<li>
 *		{@link ExternalSystemRole} can be accessed from {@link ExternalSystemArray} directly, without inteferring
 *		from {@link ExternalSystem}, with {@link ExternalSystemArray.getRole}.
 *	</li>
 *	<li>
 *		When you want to send an {@link Invoke} message to the belonged {@link ExternalSystem system}, just call
 *		{@link ExternalSystemRole.sendData ExternalSystemRole.sendData()}. Then, the message will be sent to the
 *		external system.
 *	</li>
 *	<li> Those strategy is called *Proxy Pattern*. </li>
 * </ul>
 *
 * @handbook [Templates - External System](https://github.com/samchon/framework/wiki/TypeScript-Templates-External_System)
 * @author Jeongho Nam <http://samchon.org>
 */
var ExternalSystemArray = /** @class */ (function (_super) {
    __extends(ExternalSystemArray, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function ExternalSystemArray() {
        var _this = _super.call(this) || this;
        _this.addEventListener("erase", _this._Handle_system_erase);
        return _this;
    }
    /**
     * @hidden
     */
    ExternalSystemArray.prototype._Handle_system_erase = function (event) {
        for (var it = event.first; !it.equals(event.last); it = it.next())
            it.value["destructor"]();
    };
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * Test whether the role exists.
     *
     * @param name Name, identifier of target {@link ExternalSystemRole role}.
     *
     * @return Whether the role has or not.
     */
    ExternalSystemArray.prototype.hasRole = function (name) {
        for (var i = 0; i < this.size(); i++)
            for (var j = 0; j < this.at(i).size(); j++)
                if (this.at(i).at(j).key() == name)
                    return true;
        return false;
    };
    /**
     * Get a role.
     *
     * @param name Name, identifier of target {@link ExternalSystemRole role}.
     *
     * @return The specified role.
     */
    ExternalSystemArray.prototype.getRole = function (name) {
        for (var i = 0; i < this.size(); i++)
            for (var j = 0; j < this.at(i).size(); j++)
                if (this.at(i).at(j).key() == name)
                    return this.at(i).at(j);
        throw new std.OutOfRange("No role with such name.");
    };
    /* ---------------------------------------------------------
        MESSAGE CHAIN
    --------------------------------------------------------- */
    /**
     * Send an {@link Invoke} message.
     *
     * @param invoke An {@link Invoke} message to send.
     */
    ExternalSystemArray.prototype.sendData = function (invoke) {
        for (var i = 0; i < this.size(); i++)
            this.at(i).sendData(invoke);
    };
    /* ---------------------------------------------------------
        EXPORTERS
    --------------------------------------------------------- */
    /**
     * Tag name of the {@link ExternalSytemArray} in {@link XML}.
     *
     * @return *systemArray*.
     */
    ExternalSystemArray.prototype.TAG = function () {
        return "systemArray";
    };
    /**
     * Tag name of {@link ExternalSystem children elements} belonged to the {@link ExternalSytemArray} in {@link XML}.
     *
     * @return *system*.
     */
    ExternalSystemArray.prototype.CHILD_TAG = function () {
        return "system";
    };
    return ExternalSystemArray;
}(EntityCollection_1.EntityDequeCollection));
exports.ExternalSystemArray = ExternalSystemArray;
//# sourceMappingURL=ExternalSystemArray.js.map