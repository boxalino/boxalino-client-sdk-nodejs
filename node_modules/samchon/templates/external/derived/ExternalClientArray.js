"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ExternalSystemArray_1 = require("../ExternalSystemArray");
/**
 * An array and manager of {@link ExternalSystem external clients} as a server.
 *
 * The {@link ExternalClientArray} is an abstract class, derived from the {@link ExternalSystemArray} class, opening
 * a server accepting {@link ExternalSystem external clients}.
 *
 * Extends this {@link ExternalClientArray}, overrides {@link createServerBase createServerBase()} to determine which
 * protocol to follow and {@link createExternalClient createExternalClient()} creating child {@link ExternalSystem}
 * object. After the extending and overridings, open this server using the {@link open open()} method.
 *
 * #### [Inherited] {@link ExternalSystemArray}
 * @copydoc ExternalSystemArray
 */
var ExternalClientArray = /** @class */ (function (_super) {
    __extends(ExternalClientArray, _super);
    /* =========================================================
        CONSTRUCTORS
            - MEMBER
            - FACTORY METHOD FOR CHILDREN
    ============================================================
        MEMBER
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function ExternalClientArray() {
        var _this = _super.call(this) || this;
        _this.server_base_ = null;
        return _this;
    }
    /* ---------------------------------------------------------
        FACTORY METHOD FOR CHILDREN
    --------------------------------------------------------- */
    /**
     * Add a newly connected remote client.
     *
     * When a {@link IClientDriver remote client} connects to this *server* {@link ExternalClientArray} object,
     * then this {@link ExternalClientArray} creates a child {@link ExternalSystem external client} object through
     * the {@link createExternalClient createExternalClient()} method and {@link insert inserts} it.
     *
     * @param driver A communicator for external client.
     */
    ExternalClientArray.prototype.addClient = function (driver) {
        var system = this.createExternalClient(driver);
        if (system == null)
            return;
        this.push_back(system);
    };
    /**
     * (Deprecated) Factory method creating child object.
     *
     * The method {@link createChild createChild()} is deprecated. Don't use and override this.
     *
     * Note that, the {@link ExternalClientArray} is a server accepting {@link ExternalSystem external clients}.
     * There's no way to creating the {@link ExternalSystem external clients} in advance before opening the server.
     *
     * @param xml An {@link XML} object represents the child {@link ExternalSystem} object.
     * @return null
     */
    ExternalClientArray.prototype.createChild = function (xml) { return null; };
    /* ---------------------------------------------------------
        METHOD OF SERVER
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    ExternalClientArray.prototype.open = function (port) {
        this.server_base_ = this.createServerBase();
        if (this.server_base_ == null)
            return;
        this.server_base_.open(port);
    };
    /**
     * @inheritdoc
     */
    ExternalClientArray.prototype.close = function () {
        if (this.server_base_ == null)
            return;
        this.server_base_.close();
    };
    return ExternalClientArray;
}(ExternalSystemArray_1.ExternalSystemArray));
exports.ExternalClientArray = ExternalClientArray;
//# sourceMappingURL=ExternalClientArray.js.map