"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Entity_1 = require("../../protocol/entity/Entity");
/**
 * A role of an external system.
 *
 * The {@link ExternalSystemRole} class represents a role, *WHAT TO DO*. Extends the {@link ExternalSystemRole} class
 * and overrides {@link replyData replyData()} to define the *WHAT TO DO*. And assign this {@link ExternalSystemRole}
 * object to related {@link ExternalSystem} object.
 *
 * <a href="http://samchon.github.io/framework/images/design/ts_class_diagram/templates_external_system.png"
 *		  target="_blank">
 *	<img src="http://samchon.github.io/framework/images/design/ts_class_diagram/templates_external_system.png"
 *		 style="max-width: 100%" />
 * </a>
 *
 * #### Proxy Pattern
 * The {@link ExternalSystemRole} class can be an *logical proxy*. In framework within user, which
 * {@link ExternalSystem external system} is connected with {@link ExternalSystemArray this system}, it's not
 * important. Only interested in user's perspective is *which can be done*.
 *
 * By using the *logical proxy*, user dont't need to know which {@link ExternalSystemRole role} is belonged
 * to which {@link ExternalSystem system}. Just access to a role directly from {@link ExternalSystemArray.getRole}.
 * Sends and receives {@link Invoke} message via the {@link ExternalSystemRole role}.
 *
 * <ul>
 *	<li>
 *		{@link ExternalSystemRole} can be accessed from {@link ExternalSystemArray} directly, without inteferring
 *		from {@link ExternalSystem} object, via {@link ExternalSystemArray.getRole ExternalSystemArray.getRole()}.
 *	</li>
 *	<li>
 *		When you want to send an {@link Invoke} message to the belonged {@link ExternalSystem system}, just call
 *		{@link ExternalSystemRole.sendData ExternalSystemRole.sendData()}. Then, the message will be sent to the
 *		external system.
 *	</li>
 *	<li> Those strategy is called *Proxy Pattern*. </li>
 * </ul>
 *
 * @handbook [Templates - External System](https://github.com/samchon/framework/wiki/TypeScript-Templates-External_System)
 * @author Jeongho Nam <http://samchon.org>
 */
var ExternalSystemRole = /** @class */ (function (_super) {
    __extends(ExternalSystemRole, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Constructor from a system.
     *
     * @param system An external system containing this role.
     */
    function ExternalSystemRole(system) {
        var _this = _super.call(this) || this;
        _this.system = system;
        return _this;
    }
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * Identifier of {@link ExternalSystemRole} is its {@link name}.
     */
    ExternalSystemRole.prototype.key = function () {
        return this.name;
    };
    /**
     * Get grandparent {@link ExternalSystemArray}.
     *
     * Get the grandparent {@link ExternalSystemArray} object through this parent {@link ExternalSystem},
     * {@link ExternalSystem.getSystemArray ExternalSystem.getSystemArray()}.
     *
     * @return The grandparent {@link ExternalSystemArray} object.
     */
    ExternalSystemRole.prototype.getSystemArray = function () {
        return this.system.getSystemArray();
    };
    /**
     * Get parent {@link ExternalSystemRole} object.
     */
    ExternalSystemRole.prototype.getSystem = function () {
        return this.system;
    };
    /**
     * Get name, who represents and identifies this role.
     */
    ExternalSystemRole.prototype.getName = function () {
        return this.name;
    };
    /* ---------------------------------------------------------
        MESSAGE CHAIN
    --------------------------------------------------------- */
    /**
     * Send an {@link Invoke} message.
     *
     * Sends an {@link Invoke} message to remote system through the parent {@link ExternalSystem} object.
     *
     * @param invoke An {@link Invoke} message to send to the external system.
     */
    ExternalSystemRole.prototype.sendData = function (invoke) {
        this.system.sendData(invoke);
    };
    /* ---------------------------------------------------------
        EXPORTERS
    --------------------------------------------------------- */
    /**
     * Tag name of the {@link ExternalSytemRole} in {@link XML}.
     *
     * @return *role*.
     */
    ExternalSystemRole.prototype.TAG = function () {
        return "role";
    };
    return ExternalSystemRole;
}(Entity_1.Entity));
exports.ExternalSystemRole = ExternalSystemRole;
//# sourceMappingURL=ExternalSystemRole.js.map