"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Invoke_1 = require("../../protocol/invoke/Invoke");
/**
 * An {@link Invoke} message which represents a **process**.
 *
 *
 *
 * #### [Inherited] {@link Invoke}
 * @copydoc Invoke
 */
var PInvoke = /** @class */ (function (_super) {
    __extends(PInvoke, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Initializer Constructor.
     *
     * @param invoke Original {@link Invoke} message.
     * @param history {@link InvokeHistory} object archiving execution time.
     * @param slaveSystem Related {@link SlaveSystem} object who gets those processes from its master.
     */
    function PInvoke(invoke, history, slaveSystem) {
        var _this = 
        // INVOKE'S CONSTRUCTION
        _super.call(this, invoke.getListener()) || this;
        _this.assign(invoke.begin(), invoke.end());
        // INITIALIZATION OF MEMBERS
        _this.history_ = history;
        _this.slave_system_ = slaveSystem;
        _this.hold_ = false;
        return _this;
    }
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * Get history object.
     *
     * Get {@link InvokeHistory} object who is archiving execution time of this process.
     */
    PInvoke.prototype.getHistory = function () {
        return this.history_;
    };
    /**
     * Is the reporting hold?
     */
    PInvoke.prototype.isHold = function () {
        return this.hold_;
    };
    /**
     * Hold reporting completion to master.
     */
    PInvoke.prototype.hold = function () {
        this.hold_ = true;
    };
    /**
     * Report completion.
     */
    PInvoke.prototype.complete = function () {
        this.history_.complete();
        this.slave_system_.sendData(this.history_.toInvoke());
    };
    return PInvoke;
}(Invoke_1.Invoke));
exports.PInvoke = PInvoke;
//# sourceMappingURL=PInvoke.js.map