import { Entity } from "../../protocol/entity/Entity";
import { Invoke } from "../../protocol/invoke/Invoke";
import { XML } from "sxml";
/**
 * History of an {@link Invoke} message.
 *
 * The {@link InvokeHistory} is a class archiving history log of an {@link Invoke} message with elapsed time. This
 * {@link InvokeHistory} class is used to report elapsed time of handling a requested process from **slave** to
 * **master** system.
 *
 * The **master** system utilizes derived {@link InvokeHistory} objects to compute performance indices.
 * - {@link ParallelSytem.getPerformance}
 * - {@link DistributedProcess.getResource}
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class InvokeHistory extends Entity {
    /**
     * @hidden
     */
    private uid;
    /**
     * @hidden
     */
    private listener;
    /**
     * @hidden
     */
    private start_time_;
    /**
     * @hidden
     */
    private end_time_;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Construct from an {@link Invoke} message.
     *
     * @param invoke An {@link Invoke} message requesting a *parallel or distributed process*.
     */
    constructor(invoke: Invoke);
    /**
     * @inheritdoc
     */
    construct(xml: XML): void;
    /**
     * Complete the history.
     *
     * Completes the history and determines the {@link getEndTime end time}.
     */
    complete(): void;
    key(): number;
    /**
     * Get unique ID.
     */
    getUID(): number;
    /**
     * Get {@link Invoke.getListener listener} of the {@link Invoke} message.
     */
    getListener(): string;
    /**
     * Get start time.
     */
    getStartTime(): Date;
    /**
     * Get end time.
     */
    getEndTime(): Date;
    /**
     * Compute elapsed time.
     *
     * @return nanoseconds.
     */
    computeElapsedTime(): number;
    /**
     * @inheritdoc
     */
    TAG(): string;
    /**
     * @inheritdoc
     */
    toXML(): XML;
    /**
     * Convert to an {@link Invoke} message.
     *
     * Creates and returns an {@link Invoke} message that is used to reporting to the **master**.
     */
    toInvoke(): Invoke;
}
