"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var InvokeHistory_1 = require("./InvokeHistory");
var PInvoke_1 = require("./PInvoke");
/**
 * A slave system.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var SlaveSystem = /** @class */ (function () {
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function SlaveSystem() {
        this.communicator_ = null;
    }
    /* ---------------------------------------------------------
        INVOKE MSSAGE CHIAN
    --------------------------------------------------------- */
    SlaveSystem.prototype.sendData = function (invoke) {
        this.communicator_.sendData(invoke);
    };
    /**
     * @hidden
     */
    SlaveSystem.prototype._Reply_data = function (invoke) {
        var _this = this;
        // INTERCEPT INVOKE MESSAGE
        if (invoke.has("_History_uid")) {
            // INIT HISTORY - WITH START TIME
            var history_1 = new InvokeHistory_1.InvokeHistory(invoke);
            invoke.erase(std.remove_if(invoke.begin(), invoke.end(), function (parameter) {
                return parameter.getName() == "_History_uid"
                    || parameter.getName() == "_Process_name"
                    || parameter.getName() == "_Process_weight";
            }), invoke.end()); // DETACH THE UID FOR FUNCTION AUTO-MATCHING
            // MAIN PROCESS - REPLY_DATA
            var pInvoke_1 = new PInvoke_1.PInvoke(invoke, history_1, this);
            var ret = this.replyData(pInvoke_1); // NOTHING OR PROMISE
            if (ret instanceof Function && ret.then instanceof Function && ret.catch instanceof Function) {
                ret.then(function () {
                    _this._Complete_process(pInvoke_1);
                });
            }
            else
                this._Complete_process(pInvoke_1);
        }
        else
            this.replyData(invoke);
    };
    SlaveSystem.prototype._Complete_process = function (pInvoke) {
        // NOTIFY - WITH END TIME
        if (pInvoke.isHold() == false)
            pInvoke.complete();
    };
    return SlaveSystem;
}());
exports.SlaveSystem = SlaveSystem;
//# sourceMappingURL=SlaveSystem.js.map