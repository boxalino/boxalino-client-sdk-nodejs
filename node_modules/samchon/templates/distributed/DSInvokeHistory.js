"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var InvokeHistory_1 = require("../slave/InvokeHistory");
/**
 * History of an {@link Invoke} message.
 *
 * The {@link PRInvokeHistory} is a class archiving history log of an {@link Invoke} message which requests the
 * *distributed process*, created whenever {@link DistributedProcess.sendData} is called.
 *
 * When the *distributed process* has completed, then {@link complete complete()} is called and the *elapsed time* is
 * determined. The elapsed time is utilized for computation of {@link DistributedSystem.getPerformance performance index}
 * and {@link DistributedProcess.getResource resource index} of related objects.
 *
 * <a href="http://samchon.github.io/framework/images/design/ts_class_diagram/templates_distributed_system.png"
 *		  target="_blank">
    *	<img src="http://samchon.github.io/framework/images/design/ts_class_diagram/templates_distributed_system.png"
    *		 style="max-width: 100%" />
    * </a>
    *
    * @handbook [Templates - Distributed System](https://github.com/samchon/framework/wiki/TypeScript-Templates-Distributed_System)
    * @author Jeongho Nam <http://samchon.org>
    */
var DSInvokeHistory = /** @class */ (function (_super) {
    __extends(DSInvokeHistory, _super);
    function DSInvokeHistory(system, process, invoke, weight) {
        if (process === void 0) { process = null; }
        if (invoke === void 0) { invoke = null; }
        if (weight === void 0) { weight = 1; }
        var _this = _super.call(this, invoke) || this;
        _this.system_ = system;
        _this.process_ = process;
        _this.weight_ = weight;
        return _this;
    }
    /**
     * @inheritdoc
     */
    DSInvokeHistory.prototype.construct = function (xml) {
        _super.prototype.construct.call(this, xml);
        if (xml.hasProperty("process") == false) {
            this.process_ = null;
            return;
        }
        var system_array = this.system_.getSystemArray();
        var process_name = xml.getProperty("process");
        if (system_array.hasProcess(process_name) == true)
            this.process_ = system_array.getProcess(process_name);
        else
            this.process_ = null;
    };
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * Get the related {@link DistributedSystem} object.
     */
    DSInvokeHistory.prototype.getSystem = function () {
        return this.system_;
    };
    /**
     * Get the related {@link DistributedProcess} object.
     */
    DSInvokeHistory.prototype.getProcess = function () {
        return this.process_;
    };
    /**
     * Get weight.
     *
     * Gets weight of resource which indicates how heavy this {@link Invoke} message is. Default is 1.
     */
    DSInvokeHistory.prototype.getWeight = function () {
        return this.weight_;
    };
    /* ---------------------------------------------------------
        EXPORTERS
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    DSInvokeHistory.prototype.toXML = function () {
        var xml = _super.prototype.toXML.call(this);
        if (this.process_ != null)
            xml.setProperty("process", this.process_.getName());
        return xml;
    };
    return DSInvokeHistory;
}(InvokeHistory_1.InvokeHistory));
exports.DSInvokeHistory = DSInvokeHistory;
//# sourceMappingURL=DSInvokeHistory.js.map