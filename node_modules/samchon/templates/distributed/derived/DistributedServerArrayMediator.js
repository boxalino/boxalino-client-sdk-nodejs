"use strict";
/// <reference path="../DistributedSystemArrayMediator.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DistributedSystemArrayMediator_1 = require("../DistributedSystemArrayMediator");
/**
 * Mediator of Distributed Processing System, a client connecting to slave servers.
 *
 * The {@link DistributedServerArrayMediator} is an abstract class, derived from {@link DistributedSystemArrayMediator}
 * class, connecting to {@link IDistributedServer distributed servers}.
 *
 * Extends this {@link DistributedServerArrayMediator} and overrides {@link createChild createChild()} method creating
 * child {@link IDistributedServer} object. After the extending and overriding, construct children
 * {@link IDistributedServer} objects and call the {@link connect connect()} method.
 *
 * #### [Inherited] {@link DistributedSystemArrayMediator}
 * @copydoc DistributedSystemArrayMediator
 */
var DistributedServerArrayMediator = /** @class */ (function (_super) {
    __extends(DistributedServerArrayMediator, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function DistributedServerArrayMediator() {
        return _super.call(this) || this;
    }
    /* ---------------------------------------------------------
        CONNECTOR's METHOD
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    DistributedServerArrayMediator.prototype.connect = function () {
        for (var i = 0; i < this.size(); i++)
            this.at(i).connect();
    };
    return DistributedServerArrayMediator;
}(DistributedSystemArrayMediator_1.DistributedSystemArrayMediator));
exports.DistributedServerArrayMediator = DistributedServerArrayMediator;
//# sourceMappingURL=DistributedServerArrayMediator.js.map