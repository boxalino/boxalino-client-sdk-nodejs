"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DistributedClientArray_1 = require("./DistributedClientArray");
/**
 * Master of Distributed Processing System, be a server and client at the same time.
 *
 * The {@link DistributedServerClientArray} is an abstract class, derived from the {@link DistributedSystemArray}
 * class, opening a server accepting {@link Distributed distributed clients} and being a client connecting to
 * {@link IDistributedServer distributed servers} at the same time.
 *
 * Extends this {@link DistributedServerClientArray} and overrides below methods. After the overridings, open server
 * with {@link open open()} method and connect to {@link IDistributedServer distributed servers} through the
 * {@link connect connect()} method.
 *
 * - {@link createServerBase createServerBase()}
 * - {@link createExternalClient createExternalClient()}
 * - {@link createExternalServer createExternalServer()}
 *
 * #### [Inherited] {@link DistributedSystemArray}
 * @copydoc DistributedSystemArray
 */
var DistributedServerClientArray = /** @class */ (function (_super) {
    __extends(DistributedServerClientArray, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function DistributedServerClientArray() {
        return _super.call(this) || this;
    }
    /**
     * Factory method of a child Entity.
     *
     * This method is migrated to {@link createExternalServer}. Override the {@link createExternalServer} method.
     *
     * @param xml An {@link XML} object represents child element, so that can identify the type of child to create.
     * @return A new child Entity via {@link createExternalServer createExternalServer()}.
     */
    DistributedServerClientArray.prototype.createChild = function (xml) {
        return this.createExternalServer(xml);
    };
    /* ---------------------------------------------------------
        METHOD OF CLIENT
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    DistributedServerClientArray.prototype.connect = function () {
        for (var i = 0; i < this.size(); i++) {
            var system = this.at(i);
            if (system.connect == undefined)
                continue;
            system.connect();
        }
    };
    return DistributedServerClientArray;
}(DistributedClientArray_1.DistributedClientArray));
exports.DistributedServerClientArray = DistributedServerClientArray;
//# sourceMappingURL=DistributedServerClientArray.js.map