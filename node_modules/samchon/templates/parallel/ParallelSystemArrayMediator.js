"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ParallelSystemArray_1 = require("./ParallelSystemArray");
/**
 * Mediator of Parallel Processing System.
 *
 * The {@link ParallelSystemArrayMediator} class be a **master** for its slave systems, and be a **slave** to its
 * master system at the same time. This {@link ParallelSystemArrayMediator} be a **master **system, containing and
 * managing {@link ParallelSystem} objects, which represent parallel slave systems, by extending
 * {@link ParallelSystemArray} class. Also, be a **slave** system through {@link getMediator mediator} object, which is
 * derived from the {@link SlaveSystem} class.
 *
 * As a **master**, you can specify this {@link ParallelSystemArrayMediator} class to be <i>a master server accepting
 * slave clients<i> or <i>a master client to connecting slave servers</i>. Even both of them is possible. Extends one
 * of them below and overrides abstract factory method(s) creating the child {@link ParallelSystem} object.
 *
 * - {@link ParallelClientArrayMediator}: A server accepting {@link ParallelSystem parallel clients}.
 * - {@link ParallelServerArrayMediator}: A client connecting to {@link ParallelServer parallel servers}.
 * - {@link ParallelServerClientArrayMediator}: Both of them. Accepts {@link ParallelSystem parallel clients} and
 *   connects to {@link ParallelServer parallel servers} at the same time.
 *
 * As a **slave**, you can specify this {@link ParallelSystemArrayMediator} to be <i>a client slave connecting to
 * master server</i> or <i>a server slave accepting master client</i> by overriding the {@link createMediator} method.
 * Overrides the {@link createMediator createMediator()} method and return one of them:
 *
 * - A client slave connecting to master server:
 *   - {@link MediatorClient}
 *   - {@link MediatorWebClient}
 *   - {@link MediatorSharedWorkerClient}
 * - A server slave accepting master client:
 *   - {@link MediatorServer}
 *   - {@link MediatorWebServer}
 *   - {@link MediatorDedicatedWorkerServer}
 *   - {@link MediatorSharedWorkerServer}
 *
 * #### [Inherited] {@link ParallelSystemArray}
 * @copydoc ParallelSystemArray
 */
var ParallelSystemArrayMediator = /** @class */ (function (_super) {
    __extends(ParallelSystemArrayMediator, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function ParallelSystemArrayMediator() {
        var _this = _super.call(this) || this;
        _this.mediator_ = null;
        return _this;
    }
    /**
     * Start mediator.
     *
     * If the {@link getMediator mediator} is a type of server, then opens the server accepting master client.
     * Otherwise, the {@link getMediator mediator} is a type of client, then connects the master server.
     */
    ParallelSystemArrayMediator.prototype.startMediator = function () {
        if (this.mediator_ != null)
            return;
        this.mediator_ = this.createMediator();
        this.mediator_.start();
    };
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * Get {@link MediatorSystem} object.
     *
     * When you need to send an {@link Invoke} message to the master system of this
     * {@link ParallelSystemArrayMediator}, then send to the {@link MediatorSystem} through this {@link getMediator}.
     *
     * ```typescript
     * this.getMediator().sendData(...);
     * ```
     *
     * @return The {@link MediatorSystem} object.
     */
    ParallelSystemArrayMediator.prototype.getMediator = function () {
        return this.mediator_;
    };
    /* ---------------------------------------------------------
        INVOKE MESSAGE CHAIN
    --------------------------------------------------------- */
    /**
     * @hidden
     */
    ParallelSystemArrayMediator.prototype._Complete_history = function (history) {
        var ret = _super.prototype._Complete_history.call(this, history);
        if (ret == true)
            this.mediator_["_Complete_history"](history.getUID());
        return ret;
    };
    return ParallelSystemArrayMediator;
}(ParallelSystemArray_1.ParallelSystemArray));
exports.ParallelSystemArrayMediator = ParallelSystemArrayMediator;
//# sourceMappingURL=ParallelSystemArrayMediator.js.map