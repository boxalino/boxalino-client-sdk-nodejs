"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ParallelSystemArrayMediator_1 = require("../ParallelSystemArrayMediator");
/**
 * Mediator of Parallel Processing System, a client connecting to slave servers.
 *
 * The {@link ParallelServerArrayMediator} is an abstract class, derived from the {@link ParallelSystemArrayMediator}
 * class, connecting to {@link IParallelServer parallel servers}.
 *
 * Extends this {@link ParallelServerArrayMediator} and overrides {@link createChild createChild()} method creating
 * child {@link IParallelServer} object. After the extending and overriding, construct children
 * {@link IParallelServer} objects and call the {@link connect connect()} method.
 *
 * #### [Inherited] {@link ParallelSystemArrayMediator}
 * @copydoc ParallelSystemArrayMediator
 */
var ParallelServerArrayMediator = /** @class */ (function (_super) {
    __extends(ParallelServerArrayMediator, _super);
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function ParallelServerArrayMediator() {
        return _super.call(this) || this;
    }
    /* ---------------------------------------------------------
        CONNECTOR's METHOD
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    ParallelServerArrayMediator.prototype.connect = function () {
        for (var i = 0; i < this.size(); i++) {
            this.at(i).connect();
        }
    };
    return ParallelServerArrayMediator;
}(ParallelSystemArrayMediator_1.ParallelSystemArrayMediator));
exports.ParallelServerArrayMediator = ParallelServerArrayMediator;
//# sourceMappingURL=ParallelServerArrayMediator.js.map