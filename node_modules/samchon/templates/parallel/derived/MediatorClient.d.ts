import { MediatorSystem } from "../MediatorSystem";
import { ISlaveClient } from "../../slave/SlaveClient";
import { ParallelSystemArrayMediator } from "../ParallelSystemArrayMediator";
import { ParallelSystem } from "../ParallelSystem";
import { DistributedSystemArrayMediator } from "../../distributed/DistributedSystemArrayMediator";
import { DistributedSystem } from "../../distributed/DistributedSystem";
import { IServerConnector } from "../../../protocol/communicator/IServerConnector";
/**
 * A mediator client, driver for the master server.
 *
 * The {@link MediatorServer} is a class being a client connecting to the **master** server, following the protocol
 * of Samchon Framework's own.
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
export declare class MediatorClient extends MediatorSystem implements ISlaveClient {
    /**
     * @hidden
     */
    private ip;
    /**
     * @hidden
     */
    private port;
    /**
     * Initializer Constructor.
     *
     * @param systemArray The parent {@link ParallelSystemArrayMediator} object.
     * @param ip IP address to connect.
     * @param port Port number to connect.
     */
    constructor(systemArray: ParallelSystemArrayMediator<ParallelSystem>, ip: string, port: number);
    /**
     * Initializer Constructor.
     *
     * @param systemArray The parent {@link DistributedSystemArrayMediator} object.
     * @param ip IP address to connect.
     * @param port Port number to connect.
     */
    constructor(systemArray: DistributedSystemArrayMediator<DistributedSystem>, ip: string, port: number);
    /**
     * Factory method creating {@link IServerConnector} object.
     *
     * The {@link createServerConnector createServerConnector()} is an abstract method creating
     * {@link IServerConnector} object. Overrides and returns one of them, considering which protocol the **master**
     * server follows:
     *
     * - {@link ServerConnector}
     * - {@link WebServerConnector}
     * - {@link SharedWorkerServerConnector}
     *
     * @return A newly created {@link IServerConnector} object.
     */
    protected createServerConnector(): IServerConnector;
    /**
     * @inheritdoc
     */
    start(): void;
    /**
     * @inheritdoc
     */
    connect(): void;
}
/**
 * A mediator client, driver for the master server.
 *
 * The {@link MediatorWebClient} is a class being a client connecting to the **master** server, following the
 * web-socket
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
export declare class MediatorWebClient extends MediatorClient {
    /**
     * @inheritdoc
     */
    protected createServerConnector(): IServerConnector;
}
/**
 * A mediator client, driver for the master server.
 *
 * The {@link MediatorSharedWorkerClient} is a class being a client connecting to the **master** server, following
 * the SharedWorker's protocol.
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
export declare class MediatorSharedWorkerClient extends MediatorClient {
    /**
     * @inheritdoc
     */
    protected createServerConnector(): IServerConnector;
}
