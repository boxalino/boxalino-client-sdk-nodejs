"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ParallelSystemArrayMediator_1 = require("../ParallelSystemArrayMediator");
/**
 * Mediator of Parallel Processing System, a server accepting slave clients.
 *
 * The {@link ParallelClientArrayMediator} is an abstract class, derived from the {@link ParallelSystemArrayMediator}
 * class, opening a server accepting {@link ParallelSystem parallel clients} as a **master**.
 *
 * Extends this {@link ParallelClientArrayMediator}, overrides {@link createServerBase createServerBase()} to
 * determine which protocol to follow and {@link createExternalClient createExternalClient()} creating child
 * {@link ParallelSystem} object. After the extending and overridings, open this server using the
 * {@link open open()} method.
 *
 * #### [Inherited] {@link ParallelSystemArrayMediator}
 * @copydoc ParallelSystemArrayMediator
 */
var ParallelClientArrayMediator = /** @class */ (function (_super) {
    __extends(ParallelClientArrayMediator, _super);
    /* =========================================================
        CONSTRUCTORS
            - MEMBER
            - FACTORY METHOD FOR CHILDREN
    ============================================================
        MEMBER
    --------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function ParallelClientArrayMediator() {
        return _super.call(this) || this;
    }
    /* ---------------------------------------------------------
        FACTORY METHOD FOR CHILDREN
    --------------------------------------------------------- */
    /**
     * Add a newly connected remote client.
     *
     * When a {@link IClientDriver remote client} connects to this *master server of parallel processing system*,
     * then this {@link ParallelClientArrayMediator} creates a child {@link ParallelSystem parallel client} object
     * through the {@link createExternalClient createExternalClient()} method and {@link insert inserts} it.
     *
     * @param driver A communicator for parallel client.
     */
    ParallelClientArrayMediator.prototype.addClient = function (driver) {
        var system = this.createExternalClient(driver);
        if (system == null)
            return;
        this.push_back(system);
    };
    /**
     * (Deprecated) Factory method creating child object.
     *
     * The method {@link createChild createChild()} is deprecated. Don't use and override this.
     *
     * Note that, the {@link ParallelClientArrayMediator} is a server accepting {@link ParallelSystem parallel
     * clients} as a master. There's no way to creating the {@link ParallelSystem parallel clients} in advance before
     * opening the server.
     *
     * @param xml An {@link XML} object represents the child {@link ParallelSystem} object.
     * @return null
     */
    ParallelClientArrayMediator.prototype.createChild = function (xml) { return null; };
    /* ---------------------------------------------------------
        SERVER's METHOD
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    ParallelClientArrayMediator.prototype.open = function (port) {
        this.server_base_ = this.createServerBase();
        if (this.server_base_ == null)
            return;
        this.server_base_.open(port);
        this.startMediator();
    };
    /**
     * @inheritdoc
     */
    ParallelClientArrayMediator.prototype.close = function () {
        if (this.server_base_ == null)
            return;
        this.server_base_.close();
        this.clear();
    };
    return ParallelClientArrayMediator;
}(ParallelSystemArrayMediator_1.ParallelSystemArrayMediator));
exports.ParallelClientArrayMediator = ParallelClientArrayMediator;
//# sourceMappingURL=ParallelClientArrayMediator.js.map