"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MediatorSystem_1 = require("../MediatorSystem");
var ServerConnector_1 = require("../../../protocol/communicator/server_connector/ServerConnector");
var WebServerConnector_1 = require("../../../protocol/communicator/server_connector/WebServerConnector");
var SharedWorkerServerConnector_1 = require("../../../protocol/communicator/server_connector/SharedWorkerServerConnector");
/**
 * A mediator client, driver for the master server.
 *
 * The {@link MediatorServer} is a class being a client connecting to the **master** server, following the protocol
 * of Samchon Framework's own.
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
var MediatorClient = /** @class */ (function (_super) {
    __extends(MediatorClient, _super);
    function MediatorClient(systemArray, ip, port) {
        var _this = _super.call(this, systemArray) || this;
        _this.ip = ip;
        _this.port = port;
        return _this;
    }
    /**
     * Factory method creating {@link IServerConnector} object.
     *
     * The {@link createServerConnector createServerConnector()} is an abstract method creating
     * {@link IServerConnector} object. Overrides and returns one of them, considering which protocol the **master**
     * server follows:
     *
     * - {@link ServerConnector}
     * - {@link WebServerConnector}
     * - {@link SharedWorkerServerConnector}
     *
     * @return A newly created {@link IServerConnector} object.
     */
    MediatorClient.prototype.createServerConnector = function () {
        return new ServerConnector_1.ServerConnector(this);
    };
    /* ---------------------------------------------------------
        METHOD OF CONNECTOR
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    MediatorClient.prototype.start = function () {
        this.connect();
    };
    /**
     * @inheritdoc
     */
    MediatorClient.prototype.connect = function () {
        if (this.communicator_ != null)
            return;
        this.communicator_ = this.createServerConnector();
        this.communicator_.connect(this.ip, this.port);
    };
    return MediatorClient;
}(MediatorSystem_1.MediatorSystem));
exports.MediatorClient = MediatorClient;
/**
 * A mediator client, driver for the master server.
 *
 * The {@link MediatorWebClient} is a class being a client connecting to the **master** server, following the
 * web-socket
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
var MediatorWebClient = /** @class */ (function (_super) {
    __extends(MediatorWebClient, _super);
    function MediatorWebClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritdoc
     */
    MediatorWebClient.prototype.createServerConnector = function () {
        return new WebServerConnector_1.WebServerConnector(this);
    };
    return MediatorWebClient;
}(MediatorClient));
exports.MediatorWebClient = MediatorWebClient;
/**
 * A mediator client, driver for the master server.
 *
 * The {@link MediatorSharedWorkerClient} is a class being a client connecting to the **master** server, following
 * the SharedWorker's protocol.
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
var MediatorSharedWorkerClient = /** @class */ (function (_super) {
    __extends(MediatorSharedWorkerClient, _super);
    function MediatorSharedWorkerClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritdoc
     */
    MediatorSharedWorkerClient.prototype.createServerConnector = function () {
        return new SharedWorkerServerConnector_1.SharedWorkerServerConnector(this);
    };
    return MediatorSharedWorkerClient;
}(MediatorClient));
exports.MediatorSharedWorkerClient = MediatorSharedWorkerClient;
//# sourceMappingURL=MediatorClient.js.map