"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MediatorSystem_1 = require("../MediatorSystem");
var ServerBase_1 = require("../../../protocol/server/base/ServerBase");
var WebServerBase_1 = require("../../../protocol/server/base/WebServerBase");
var DedicatedWorkerServerBase_1 = require("../../../protocol/server/base/DedicatedWorkerServerBase");
var SharedWorkerServerBase_1 = require("../../../protocol/server/base/SharedWorkerServerBase");
/**
 * A mediator server, driver for the master client.
 *
 * The {@link MediatorServer} is a class opening a server accepting the **master** client, following the protocol of
 * Samchon Framework's own.
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
var MediatorServer = /** @class */ (function (_super) {
    __extends(MediatorServer, _super);
    function MediatorServer(systemArray, port) {
        var _this = _super.call(this, systemArray) || this;
        _this.port = port;
        return _this;
    }
    /**
     * Factory method creating {@link IServer} object.
     *
     * This method {@link createServerBase createServerBase()} determines which protocol is used in this server,
     * {@link MediatorServer}. Note that, **slave** (this {@link MediatorServer} object) must follow the **master**'s
     *
     *
     * Overrides and return one of them considering the which protocol to follow:
     *
     * - {@link ServerBase}
     * - {@link WebServerBase}
     * - {@link SharedWorkerServerBase}
     */
    MediatorServer.prototype.createServerBase = function () {
        return new ServerBase_1.ServerBase(this);
    };
    /**
     * Add a newly connected remote client.
     *
     * {@link MediatorServer} represents a **slave** dedicating to its **master**. In that reason, the
     * {@link MediatorServer} does not accept multiple **master** clients. It accepts only one. Thus, *listener* of
     * the *communicator* is {@link MediatorSystem} object, itself.
     *
     * @param driver A communicator with remote client.
     */
    MediatorServer.prototype.addClient = function (driver) {
        this.communicator_ = driver;
        driver.listen(this);
    };
    /* ---------------------------------------------------------
        SERVER's METHOD
    --------------------------------------------------------- */
    /**
     * @inheritdoc
     */
    MediatorServer.prototype.start = function () {
        this.open(this.port);
    };
    /**
     * @inheritdoc
     */
    MediatorServer.prototype.open = function (port) {
        this.server_base_ = this.createServerBase();
        if (this.server_base_ == null)
            return;
        this.server_base_.open(port);
    };
    /**
     * @inheritdoc
     */
    MediatorServer.prototype.close = function () {
        if (this.server_base_ != null)
            this.server_base_.close();
    };
    return MediatorServer;
}(MediatorSystem_1.MediatorSystem));
exports.MediatorServer = MediatorServer;
/**
 * A mediator server, driver for the master client.
 *
 * The {@link MediatorWebServer} is a class opening a server accepting the **master** client, following the
 * web-socket
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
var MediatorWebServer = /** @class */ (function (_super) {
    __extends(MediatorWebServer, _super);
    function MediatorWebServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritdoc
     */
    MediatorWebServer.prototype.createServerBase = function () {
        return new WebServerBase_1.WebServerBase(this);
    };
    return MediatorWebServer;
}(MediatorServer));
exports.MediatorWebServer = MediatorWebServer;
/**
 * A mediator server, driver for the master client.
 *
 * The {@link MediatorDedicatedWorkerServer} is a class opening a server accepting the **master** client, following
 * the DedicatedWorker's
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
var MediatorDedicatedWorkerServer = /** @class */ (function (_super) {
    __extends(MediatorDedicatedWorkerServer, _super);
    function MediatorDedicatedWorkerServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritdoc
     */
    MediatorDedicatedWorkerServer.prototype.createServerBase = function () {
        return new DedicatedWorkerServerBase_1.DedicatedWorkerServerBase(this);
    };
    return MediatorDedicatedWorkerServer;
}(MediatorServer));
exports.MediatorDedicatedWorkerServer = MediatorDedicatedWorkerServer;
/**
 * A mediator server, driver for the master client.
 *
 * The {@link MediatorSharedWorkerServer} is a class opening a server accepting the **master** client, following the
 * SharedWorker's
 *
 * #### [Inherited] {@link MediatorSystem}
 * @copydoc MediatorSystem
 */
var MediatorSharedWorkerServer = /** @class */ (function (_super) {
    __extends(MediatorSharedWorkerServer, _super);
    function MediatorSharedWorkerServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritdoc
     */
    MediatorSharedWorkerServer.prototype.createServerBase = function () {
        return new SharedWorkerServerBase_1.SharedWorkerServerBase(this);
    };
    return MediatorSharedWorkerServer;
}(MediatorServer));
exports.MediatorSharedWorkerServer = MediatorSharedWorkerServer;
//# sourceMappingURL=MediatorServer.js.map