"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var index_1 = require("./index");
var Invoke = /** @class */ (function (_super) {
    __extends(Invoke, _super);
    function Invoke(listener) {
        var _this = _super.call(this) || this;
        _this.listener = listener;
        return _this;
    }
    Invoke.prototype.toXML = function () {
        var e_1, _a;
        var ret = new index_1.XML();
        ret.setTag("invoke");
        ret.setProperty("listener", this.listener);
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var param = _c.value;
                ret.push(param.toXML());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return ret;
    };
    return Invoke;
}(std.Vector));
var Parameter = /** @class */ (function () {
    function Parameter(name, type, value) {
        if (value === void 0) { value = null; }
        this.name = name;
        this.type = type;
        this.value = value;
    }
    Parameter.prototype.toXML = function () {
        var ret = new index_1.XML();
        ret.setTag("parameter");
        ret.setProperty("name", this.name);
        ret.setProperty("type", this.type);
        if (this.value !== null)
            if (this.value instanceof index_1.XML)
                ret.push(this.value);
            else
                ret.setValue(this.value);
        return ret;
    };
    return Parameter;
}());
var Member = /** @class */ (function () {
    function Member(id, email, name) {
        this.id = id;
        this.email = email;
        this.name = name;
    }
    Member.prototype.toXML = function () {
        var ret = new index_1.XML();
        ret.setTag("member");
        ret.setProperty("id", this.id);
        ret.setProperty("email", this.email);
        ret.setProperty("name", this.name);
        return ret;
    };
    return Member;
}());
function validate_equality(x, y) {
    if (std.not_equal_to(x, y))
        throw new std.DomainError("Error on XML Parser.");
}
function write() {
    var e_2, _a;
    var invoke = new Invoke("setMemberList");
    invoke.push_back(new Parameter("application", "string", "simulation"));
    invoke.push_back(new Parameter("sequence", "number", "3"));
    var members = new std.Vector();
    members.push(new Member("samchon", "samchon@samchon.org", "Jeongho Nam"), new Member("github", "github@github.com", "GitHub"), new Member("robot", "google@google.com", "AlphaGo"));
    var memberList = new index_1.XML();
    memberList.setTag("memberList");
    try {
        for (var members_1 = __values(members), members_1_1 = members_1.next(); !members_1_1.done; members_1_1 = members_1.next()) {
            var elem = members_1_1.value;
            memberList.push(elem.toXML());
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (members_1_1 && !members_1_1.done && (_a = members_1.return)) _a.call(members_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    invoke.push_back(new Parameter("memberList", "XML", memberList));
    return std.make_pair(invoke, members);
}
function read(pair) {
    var invoke = pair.first;
    var members = pair.second;
    // CREATE AN XML OBJECT BY PARSING CHARACTERS
    var xml = pair.first.toXML();
    //----
    // CONVERTING TESTS
    //----
    var xml2 = new index_1.XML(xml.toString());
    var xml3 = new index_1.XML(xml);
    validate_equality(xml.toString(), xml2.toString());
    validate_equality(xml2.toString(), xml3.toString());
    //----
    // LIST OF PARAMETER OBJECTS
    //----
    // XML => std.HashMap<string, XMLList>
    // XMLList => std.Vector<XML>
    var xmlList = xml.get("parameter");
    // VALIDATE SIZE
    validate_equality(xmlList.size(), invoke.size());
    // VALIDATE MEMBERS OF PARAMETERS
    for (var i = 0; i < invoke.size(); ++i) {
        var param = invoke.at(i);
        var child = xmlList.at(i);
        validate_equality(param.name, child.getProperty("name"));
        validate_equality(param.type, child.getProperty("type"));
        if (typeof param.value === "string")
            validate_equality(param.value, child.getValue());
    }
    //----
    // ACCESS TO CHILDREN XML OBJECTS
    //----
    xmlList = xml.get("parameter").at(2)
        .get("memberList").at(0)
        .get("member");
    // VALIDATE SIZE
    validate_equality(xmlList.size(), members.size());
    // VALIDATE MEMBERS OF MEMBERS
    for (var i = 0; i < members.size(); ++i) {
        var member = members.at(i);
        var child = xmlList.at(i);
        validate_equality(member.id, child.getProperty("id"));
        validate_equality(member.email, child.getProperty("email"));
        validate_equality(member.name, child.getProperty("name"));
    }
}
function main() {
    read(write());
}
main();
//# sourceMappingURL=test.js.map