"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var std = require("tstl");
var XMLList = /** @class */ (function (_super) {
    __extends(XMLList, _super);
    function XMLList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    XMLList.prototype.getTag = function () {
        return this.front().getTag();
    };
    XMLList.prototype.toString = function (level) {
        if (level === void 0) { level = 0; }
        var e_1, _a;
        var ret = "";
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var xml = _c.value;
                ret += xml.toString(level) + "\n";
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return ret;
    };
    return XMLList;
}(std.Vector));
exports.XMLList = XMLList;
//# sourceMappingURL=XMLList.js.map