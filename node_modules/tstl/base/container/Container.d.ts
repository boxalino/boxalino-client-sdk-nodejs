import { IContainer } from "./IContainer";
import { Iterator } from "../iterator/Iterator";
import { ReverseIterator } from "../iterator/ReverseIterator";
import { IForwardIterator } from "../../iterator/IForwardIterator";
/**
 * Base container.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class Container<T, SourceT extends IContainer<T, SourceT, IteratorT, ReverseIteratorT>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseIteratorT>, ReverseIteratorT extends ReverseIterator<T, SourceT, IteratorT, ReverseIteratorT>> implements IContainer<T, SourceT, IteratorT, ReverseIteratorT> {
    /**
     * @inheritDoc
     */
    abstract assign<U extends T, InputIterator extends Readonly<IForwardIterator<U, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    abstract size(): number;
    /**
     * @inheritDoc
     */
    empty(): boolean;
    /**
     * @inheritDoc
     */
    abstract begin(): IteratorT;
    /**
     * @inheritDoc
     */
    abstract end(): IteratorT;
    /**
     * @inheritDoc
     */
    rbegin(): ReverseIteratorT;
    /**
     * @inheritDoc
     */
    rend(): ReverseIteratorT;
    /**
     * @inheritDoc
     */
    [Symbol.iterator](): IterableIterator<T>;
    /**
     * @inheritDoc
     */
    abstract push(...items: T[]): number;
    /**
     * @inheritDoc
     */
    abstract insert(pos: IteratorT, val: T): IteratorT;
    /**
     * @inheritDoc
     */
    abstract erase(pos: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    abstract erase(first: IteratorT, last: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    abstract swap(obj: SourceT): void;
    /**
     * @inheritDoc
     */
    toJSON(): Array<T>;
}
//# sourceMappingURL=Container.d.ts.map