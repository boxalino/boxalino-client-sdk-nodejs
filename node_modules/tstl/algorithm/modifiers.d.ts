import { IForwardIterator } from "../iterator/IForwardIterator";
import { IBidirectionalIterator } from "../iterator/IBidirectionalIterator";
import { IRandomAccessIterator } from "../iterator/IRandomAccessIterator";
import { Writeonly, General } from "../iterator/IFake";
/**
 * Copy elements in range.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the first position.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function copy<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, last: InputIterator, output: OutputIterator): OutputIterator;
/**
 * Copy *n* elements.
 *
 * @param first Input iteartor of the first position.
 * @param n Number of elements to copy.
 * @param output Output iterator of the first position.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function copy_n<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, n: number, output: OutputIterator): OutputIterator;
/**
 * Copy specific elements by a condition.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the first position.
 * @param pred A function predicates the specific condition.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function copy_if<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, last: InputIterator, output: OutputIterator, pred: (x: T) => boolean): OutputIterator;
/**
 * Copy elements reversely.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the first position.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function copy_backward<T, BidirectionalIterator1 extends Readonly<IBidirectionalIterator<T, BidirectionalIterator1>>, BidirectionalIterator2 extends Writeonly<IBidirectionalIterator<T, BidirectionalIterator2>>>(first: BidirectionalIterator1, last: BidirectionalIterator1, output: BidirectionalIterator2): BidirectionalIterator2;
/**
 * Fill range elements
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param val The value to fill.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function fill<T, ForwardIterator extends Writeonly<IForwardIterator<T, ForwardIterator>>>(first: ForwardIterator, last: ForwardIterator, val: T): void;
/**
 * Fill *n* elements.
 *
 * @param first Input iteartor of the first position.
 * @param n Number of elements to fill.
 * @param val The value to fill.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function fill_n<T, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: OutputIterator, n: number, val: T): OutputIterator;
/**
 * Transform elements.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the first position.
 * @param op Unary function determines the transform.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function transform<T, Ret, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<Ret, OutputIterator>>>(first: InputIterator, last: InputIterator, result: OutputIterator, op: (val: T) => Ret): OutputIterator;
/**
 * Transform elements.
 *
 * @param first1 Input iteartor of the first position of the 1st range.
 * @param last1 Input iterator of the last position of the 1st range.
 * @param first2 Input iterator of the first position of the 2nd range.
 * @param output Output iterator of the first position.
 * @param op Binary function determines the transform.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function transform<T, Ret, InputIterator1 extends Readonly<IForwardIterator<T, InputIterator1>>, InputIterator2 extends Readonly<IForwardIterator<T, InputIterator2>>, OutputIterator extends Writeonly<IForwardIterator<Ret, OutputIterator>>>(first1: InputIterator1, last1: InputIterator1, first2: InputIterator2, result: OutputIterator, binary_op: (x: T, y: T) => Ret): OutputIterator;
/**
 * Generate range elements.
 *
 * @param first Forward iteartor of the first position.
 * @param last Forward iterator of the last position.
 * @param gen The generator function.
 */
export declare function generate<T, ForwardIterator extends Writeonly<IForwardIterator<T, ForwardIterator>>>(first: ForwardIterator, last: ForwardIterator, gen: () => T): void;
/**
 * Generate *n* elements.
 *
 * @param first Forward iteartor of the first position.
 * @param n Number of elements to generate.
 * @param gen The generator function.
 *
 * @return Forward Iterator to the last position by advancing.
 */
export declare function generate_n<T, ForwardIterator extends Writeonly<IForwardIterator<T, ForwardIterator>>>(first: ForwardIterator, n: number, gen: () => T): ForwardIterator;
/**
 * Remove duplicated elements in sorted range.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param pred A binary function predicates two arguments are equal. Default is {@link equal_to}.
 *
 * @return Input iterator to the last element not removed.
 */
export declare function unique<T, InputIterator extends General<IForwardIterator<T, InputIterator>>>(first: InputIterator, last: InputIterator, pred?: (x: T, y: T) => boolean): InputIterator;
/**
 * Copy elements in range without duplicates.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the last position.
 * @param pred A binary function predicates two arguments are equal. Default is {@link equal_to}.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function unique_copy<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, last: InputIterator, output: OutputIterator, pred?: (x: T, y: T) => boolean): OutputIterator;
/**
 * Remove specific value in range.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param val The specific value to remove.
 *
 * @return Iterator tho the last element not removed.
 */
export declare function remove<T, InputIterator extends General<IForwardIterator<T, InputIterator>>>(first: InputIterator, last: InputIterator, val: T): InputIterator;
/**
 * Remove elements in range by a condition.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param pred An unary function predicates remove.
 *
 * @return Iterator tho the last element not removed.
 */
export declare function remove_if<T, InputIterator extends General<IForwardIterator<T, InputIterator>>>(first: InputIterator, last: InputIterator, pred: (val: T) => boolean): InputIterator;
/**
 * Copy range removing specific value.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the last position.
 * @param val The condition predicates remove.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function remove_copy<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, last: InputIterator, output: OutputIterator, val: T): OutputIterator;
/**
 * Copy range removing elements by a condition.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the last position.
 * @param pred An unary function predicates remove.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function remove_copy_if<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, last: InputIterator, output: OutputIterator, pred: (x: T) => boolean): OutputIterator;
/**
 * Replace specific value in range.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param old_val Specific value to change
 * @param new_val Specific value to be changed.
 */
export declare function replace<T, InputIterator extends General<IForwardIterator<T, InputIterator>>>(first: InputIterator, last: InputIterator, old_val: T, new_val: T): void;
/**
 * Replace specific condition in range.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param pred An unary function predicates the change.
 * @param new_val Specific value to be changed.
 */
export declare function replace_if<T, InputIterator extends General<IForwardIterator<T, InputIterator>>>(first: InputIterator, last: InputIterator, pred: (val: T) => boolean, new_val: T): void;
/**
 * Copy range replacing specific value.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the first position.
 * @param old_val Specific value to change
 * @param new_val Specific value to be changed.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function replace_copy<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, last: InputIterator, output: OutputIterator, old_val: T, new_val: T): OutputIterator;
/**
 * Copy range replacing specfic condition.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 * @param output Output iterator of the first position.
 * @param pred An unary function predicates the change.
 * @param new_val Specific value to be changed.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function replace_copy_if<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: InputIterator, last: InputIterator, result: OutputIterator, pred: (val: T) => boolean, new_val: T): OutputIterator;
/**
 * Swap values of two iterators.
 *
 * @param x Forward iterator to swap its value.
 * @param y Forward iterator to swap its value.
 */
export declare function iter_swap<T, ForwardIterator1 extends General<IForwardIterator<T, ForwardIterator1>>, ForwardIterator2 extends General<IForwardIterator<T, ForwardIterator2>>>(x: ForwardIterator1, y: ForwardIterator2): void;
/**
 * Swap values of two ranges.
 *
 * @param first1 Forward iteartor of the first position of the 1st range.
 * @param last1 Forward iterator of the last position of the 1st range.
 * @param first2 Forward iterator of the first position of the 2nd range.
 *
 * @return Forward Iterator of the last position of the 2nd range by advancing.
 */
export declare function swap_ranges<T, ForwardIterator1 extends General<IForwardIterator<T, ForwardIterator1>>, ForwardIterator2 extends General<IForwardIterator<T, ForwardIterator2>>>(first1: ForwardIterator1, last1: ForwardIterator1, first2: ForwardIterator2): ForwardIterator2;
/**
 * Reverse elements in range.
 *
 * @param first Bidirectional iterator of the first position.
 * @param last Bidirectional iterator of the last position.
 */
export declare function reverse<T, BidirectionalIterator extends General<IBidirectionalIterator<T, BidirectionalIterator>>>(first: BidirectionalIterator, last: BidirectionalIterator): void;
/**
 * Copy reversed elements in range.
 *
 * @param first Bidirectional iterator of the first position.
 * @param last Bidirectional iterator of the last position.
 * @param output Output iterator of the first position.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function reverse_copy<T, BidirectionalIterator extends Readonly<IBidirectionalIterator<T, BidirectionalIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: BidirectionalIterator, last: BidirectionalIterator, output: OutputIterator): OutputIterator;
/**
 * Rotate elements in range.
 *
 * @param first Input iteartor of the first position.
 * @param middle Input iteartor of the initial position of the right side.
 * @param last Input iteartor of the last position.
 *
 * @return Input iterator of the final position in the left side; *middle*.
 */
export declare function rotate<T, InputIterator extends General<IForwardIterator<T, InputIterator>>>(first: InputIterator, middle: InputIterator, last: InputIterator): InputIterator;
/**
 * Copy rotated elements in range.
 *
 * @param first Input iteartor of the first position.
 * @param middle Input iteartor of the initial position of the right side.
 * @param last Input iteartor of the last position.
 * @param output Output iterator of the last position.
 *
 * @return Output Iterator of the last position by advancing.
 */
export declare function rotate_copy<T, ForwardIterator extends Readonly<IForwardIterator<T, ForwardIterator>>, OutputIterator extends Writeonly<IForwardIterator<T, OutputIterator>>>(first: ForwardIterator, middle: ForwardIterator, last: ForwardIterator, output: OutputIterator): OutputIterator;
/**
 * Shuffle elements in range.
 *
 * @param first Random access iteartor of the first position.
 * @param last Random access iteartor of the last position.
 */
export declare function shuffle<T, RandomAccessIterator extends General<IRandomAccessIterator<T, RandomAccessIterator>>>(first: RandomAccessIterator, last: RandomAccessIterator): void;
//# sourceMappingURL=modifiers.d.ts.map