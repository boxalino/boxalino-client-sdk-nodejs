import { IForwardIterator } from "./IForwardIterator";
import { IBidirectionalContainer } from "../base/disposable/IBidirectionalContainer";
import { IReversableIterator, IReverseIterator } from "./IReverseIterator";
import { IForwardContainer } from "../base/disposable/IForwardContainer";
import { _IInsert, _IPushFront, _IPushBack } from "../base/disposable/IPartialContainers";
import { Vector } from "../container/Vector";
import { InsertIterator } from "./InsertIterator";
import { FrontInsertIterator } from "./FrontInsertIterator";
import { BackInsertIterator } from "./BackInsertIterator";
/**
 * Iterator to the first element.
 *
 * @param container Target container.
 * @return Iterator to the first element.
 */
export declare function begin<T, Iterator extends IForwardIterator<T, Iterator>>(container: IForwardContainer<T, Iterator>): Iterator;
/**
 * @hidden
 */
export declare function begin<T>(container: Array<T>): Vector.Iterator<T>;
/**
 * Iterator to the end.
 *
 * @param container Target container.
 * @return Iterator to the end.
 */
export declare function end<T, Iterator extends IForwardIterator<T, Iterator>>(container: IForwardContainer<T, Iterator>): Iterator;
/**
 * @hidden
 */
export declare function end<T>(container: Array<T>): Vector.Iterator<T>;
/**
 * Construct insert iterator.
 *
 * @param container Target container.
 * @param it Iterator to the first insertion position.
 * @return The {@link InsertIterator insert iterator} object.
 */
export declare function inserter<T, Container extends _IInsert<T, Iterator>, Iterator extends IForwardIterator<T, Iterator>>(container: Container, it: Iterator): InsertIterator<T, Container, Iterator>;
/**
 * @hidden
 */
export declare function inserter<T>(container: Array<T>, it: Vector.Iterator<T>): InsertIterator<T, Vector<T>, Vector.Iterator<T>>;
/**
 * Construct front insert iterator.
 *
 * @param source Target container.
 * @return The {@link FrontInsertIterator front insert iterator} object.
 */
export declare function front_inserter<T, Source extends _IPushFront<T>>(source: Source): FrontInsertIterator<T, Source>;
/**
 * Construct back insert iterator.
 *
 * @param source Target container.
 * @return The {@link back insert iterator} object.
 */
export declare function back_inserter<T, Source extends _IPushBack<T>>(source: Source): BackInsertIterator<T, Source>;
/**
 * @hidden
 */
export declare function back_inserter<T>(source: Array<T>): BackInsertIterator<T, Vector<T>>;
/**
 * Construct reverse iterator.
 *
 * @param it Target iterator that reversable.
 * @return The reverse iterator object.
 */
export declare function make_reverse_iterator<T, IteratorT extends IReversableIterator<T, IteratorT, ReverseT>, ReverseT extends IReverseIterator<T, IteratorT, ReverseT>>(it: IteratorT): ReverseT;
/**
 * Get reverse iterator to the first element in reverse.
 *
 * @param container Target container.
 * @return The reverse iterator to the first.
 */
export declare function rbegin<T, Iterator extends IReversableIterator<T, Iterator, ReverseIterator>, ReverseIterator extends IReverseIterator<T, Iterator, ReverseIterator>>(container: IBidirectionalContainer<T, Iterator, ReverseIterator>): ReverseIterator;
/**
 * @hidden
 */
export declare function rbegin<T>(container: Array<T>): Vector.ReverseIterator<T>;
/**
 * Get reverse iterator to the reverse end.
 *
 * @param container Target container.
 * @return The reverse iterator to the end.
 */
export declare function rend<T, Iterator extends IReversableIterator<T, Iterator, ReverseIterator>, ReverseIterator extends IReverseIterator<T, Iterator, ReverseIterator>>(container: IBidirectionalContainer<T, Iterator, ReverseIterator>): ReverseIterator;
/**
 * @hidden
 */
export declare function rend<T>(container: Array<T>): Vector.ReverseIterator<T>;
//# sourceMappingURL=factory.d.ts.map