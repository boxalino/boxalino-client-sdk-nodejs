import { _ISharedLockable } from "../base/thread/_ISharedLockable";
import { _ITimedLockable } from "../base/thread/_ITimedLockable";
/**
 * Shared timed mutex.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class SharedTimedMutex implements _ISharedLockable, _ITimedLockable {
    /**
     * @hidden
     */
    private read_lock_count_;
    /**
     * @hidden
     */
    private write_lock_count_;
    /**
     * @hidden
     */
    private resolvers_;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * @inheritDoc
     */
    lock(): Promise<void>;
    /**
     * @inheritDoc
     */
    try_lock(): Promise<boolean>;
    /**
     * @inheritDoc
     */
    try_lock_for(ms: number): Promise<boolean>;
    /**
     * @inheritDoc
     */
    try_lock_until(at: Date): Promise<boolean>;
    /**
     * @inheritDoc
     */
    unlock(): Promise<void>;
    /**
     * @inheritDoc
     */
    lock_shared(): Promise<void>;
    /**
     * @inheritDoc
     */
    try_lock_shared(): Promise<boolean>;
    /**
     * Try lock shared until timeout.
     *
     * @param ms The maximum miliseconds for waiting.
     * @return Whether succeded to lock or not.
     */
    try_lock_shared_for(ms: number): Promise<boolean>;
    /**
     * Try lock shared until time expiration.
     *
     * @param at The maximum time point to wait.
     * @return Whether succeded to lock or not.
     */
    try_lock_shared_until(at: Date): Promise<boolean>;
    /**
     * @inheritDoc
     */
    unlock_shared(): Promise<void>;
}
export declare type shared_timed_mutex = SharedTimedMutex;
export declare const shared_timed_mutex: typeof SharedTimedMutex;
//# sourceMappingURL=SharedTimedMutex.d.ts.map