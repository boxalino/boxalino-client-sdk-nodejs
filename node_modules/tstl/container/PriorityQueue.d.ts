import { AdaptorContainer } from "../base/container/AdaptorContainer";
import { TreeMultiSet } from "../container/TreeMultiSet";
import { IForwardIterator } from "../iterator/IForwardIterator";
/**
 * Priority Queue; Higher Out First.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class PriorityQueue<T> extends AdaptorContainer<T, TreeMultiSet<T>, PriorityQueue<T>> {
    /**
     * Default Constructor.
     *
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(comp?: (x: T, y: T) => boolean);
    /**
     * Copy Constructor.
     *
     * @param obj Object to copy.
     */
    constructor(obj: PriorityQueue<T>);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iterator of the last position.
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(first: Readonly<IForwardIterator<T>>, last: Readonly<IForwardIterator<T>>, comp?: (x: T, y: T) => boolean);
    /**
     * Get value comparison function.
     */
    value_comp(): (x: T, y: T) => boolean;
    /**
     * Get top element.
     */
    top(): T;
    /**
     * @inheritDoc
     */
    pop(): void;
}
export declare type priority_queue<T> = PriorityQueue<T>;
export declare const priority_queue: typeof PriorityQueue;
//# sourceMappingURL=PriorityQueue.d.ts.map