import { Container } from "tstl/base/container/Container";
import { Iterator } from "tstl/base/iterator/Iterator";
import { ReverseIterator } from "tstl/base/iterator/ReverseIterator";
export declare class CollectionEvent<T, SourceT extends Container<T, SourceT, IteratorT, ReverseT>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseT>, ReverseT extends ReverseIterator<T, SourceT, IteratorT, ReverseT>> implements Iterable<T> {
    readonly type: string;
    readonly first: IteratorT;
    readonly last: IteratorT;
    constructor(type: string, first: IteratorT, last: IteratorT);
    [Symbol.iterator](): IterableIterator<T>;
}
export declare namespace CollectionEvent {
    type Type = "insert" | "erase" | "refresh";
    type Listener<T, SourceT extends Container<T, SourceT, IteratorT, ReverseT>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseT>, ReverseT extends ReverseIterator<T, SourceT, IteratorT, ReverseT>> = (event: CollectionEvent<T, SourceT, IteratorT, ReverseT>) => void;
}
//# sourceMappingURL=CollectionEvent.d.ts.map