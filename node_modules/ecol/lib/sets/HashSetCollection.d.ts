import { HashSet } from "tstl/container/HashSet";
import { ICollection } from "../basic/ICollection";
import { CollectionEvent } from "../basic/CollectionEvent";
export declare class HashSetCollection<T> extends HashSet<T> implements ICollection<T, HashSet<T>, HashSet.Iterator<T>, HashSet.ReverseIterator<T>> {
    /**
     * @hidden
     */
    private dispatcher_;
    clear(): void;
    /**
     * @hidden
     */
    protected _Handle_insert(first: HashSet.Iterator<T>, last: HashSet.Iterator<T>): void;
    /**
     * @hidden
     */
    protected _Handle_erase(first: HashSet.Iterator<T>, last: HashSet.Iterator<T>): void;
    /**
     * @inheritDoc
     */
    dispatchEvent(event: HashSetCollection.Event<T>): void;
    /**
     * @inheritDoc
     */
    refresh(): void;
    /**
     * @inheritDoc
     */
    refresh(it: HashSet.Iterator<T>): void;
    /**
     * @inheritDoc
     */
    refresh(first: HashSet.Iterator<T>, last: HashSet.Iterator<T>): void;
    /**
     * @inheritDoc
     */
    hasEventListener(type: CollectionEvent.Type): boolean;
    /**
     * @inheritDoc
     */
    addEventListener(type: CollectionEvent.Type, listener: HashSetCollection.Listener<T>): void;
    /**
     * @inheritDoc
     */
    removeEventListener(type: CollectionEvent.Type, listener: HashSetCollection.Listener<T>): void;
}
export declare namespace HashSetCollection {
    type Event<T> = CollectionEvent<T, HashSet<T>, HashSet.Iterator<T>, HashSet.ReverseIterator<T>>;
    type Listener<T> = CollectionEvent.Listener<T, HashSet<T>, HashSet.Iterator<T>, HashSet.ReverseIterator<T>>;
    const Event: typeof CollectionEvent;
    export import Iterator = HashSet.Iterator;
    export import ReverseIterator = HashSet.ReverseIterator;
}
//# sourceMappingURL=HashSetCollection.d.ts.map