"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HashMultiSet_1 = require("tstl/container/HashMultiSet");
var CollectionEvent_1 = require("../basic/CollectionEvent");
var EventDispatcher_1 = require("../basic/EventDispatcher");
var HashMultiSetCollection = /** @class */ (function (_super) {
    __extends(HashMultiSetCollection, _super);
    function HashMultiSetCollection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.dispatcher_ = new EventDispatcher_1.EventDispatcher();
        return _this;
    }
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    // using super.constructor
    HashMultiSetCollection.prototype.clear = function () {
        var first = this.begin();
        var last = this.end();
        _super.prototype.clear.call(this);
        this.dispatchEvent(new CollectionEvent_1.CollectionEvent("erase", first, last));
    };
    /* ---------------------------------------------------------
        ELEMENTS I/O
    --------------------------------------------------------- */
    /**
     * @hidden
     */
    HashMultiSetCollection.prototype._Handle_insert = function (first, last) {
        _super.prototype._Handle_insert.call(this, first, last);
        this.dispatchEvent(new CollectionEvent_1.CollectionEvent("insert", first, last));
    };
    /**
     * @hidden
     */
    HashMultiSetCollection.prototype._Handle_erase = function (first, last) {
        this._Handle_erase(first, last);
        this.dispatchEvent(new CollectionEvent_1.CollectionEvent("erase", first, last));
    };
    /* =========================================================
        EVENT DISPATCHER
            - NOTIFIERS
            - ACCESSORS
    ============================================================
        NOTIFIERS
    --------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    HashMultiSetCollection.prototype.dispatchEvent = function (event) {
        if (this.dispatcher_)
            this.dispatcher_.dispatchEvent(event);
    };
    HashMultiSetCollection.prototype.refresh = function (first, last) {
        if (first === void 0) { first = null; }
        if (last === void 0) { last = null; }
        if (first === null) {
            first = this.begin();
            last = this.end();
        }
        else if (last === null)
            last = first.next();
        this.dispatchEvent(new CollectionEvent_1.CollectionEvent("refresh", first, last));
    };
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    HashMultiSetCollection.prototype.hasEventListener = function (type) {
        return this.dispatcher_.hasEventListener(type);
    };
    /**
     * @inheritDoc
     */
    HashMultiSetCollection.prototype.addEventListener = function (type, listener) {
        this.dispatcher_.addEventListener(type, listener);
    };
    /**
     * @inheritDoc
     */
    HashMultiSetCollection.prototype.removeEventListener = function (type, listener) {
        this.dispatcher_.removeEventListener(type, listener);
    };
    return HashMultiSetCollection;
}(HashMultiSet_1.HashMultiSet));
exports.HashMultiSetCollection = HashMultiSetCollection;
(function (HashMultiSetCollection) {
    HashMultiSetCollection.Event = CollectionEvent_1.CollectionEvent;
    HashMultiSetCollection.Iterator = HashMultiSet_1.HashMultiSet.Iterator;
    HashMultiSetCollection.ReverseIterator = HashMultiSet_1.HashMultiSet.ReverseIterator;
})(HashMultiSetCollection = exports.HashMultiSetCollection || (exports.HashMultiSetCollection = {}));
exports.HashMultiSetCollection = HashMultiSetCollection;
var old_swap = HashMultiSet_1.HashMultiSet.prototype.swap;
HashMultiSet_1.HashMultiSet.prototype.swap = function (obj) {
    old_swap.call(this, obj);
    if (this instanceof HashMultiSetCollection)
        this.refresh();
    if (obj instanceof HashMultiSetCollection)
        obj.refresh();
};
//# sourceMappingURL=HashMultiSetCollection.js.map