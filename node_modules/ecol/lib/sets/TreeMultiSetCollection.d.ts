import { TreeMultiSet } from "tstl/container/TreeMultiSet";
import { ICollection } from "../basic/ICollection";
import { CollectionEvent } from "../basic/CollectionEvent";
export declare class TreeMultiSetCollection<T> extends TreeMultiSet<T> implements ICollection<T, TreeMultiSet<T>, TreeMultiSet.Iterator<T>, TreeMultiSet.ReverseIterator<T>> {
    /**
     * @hidden
     */
    private dispatcher_;
    clear(): void;
    /**
     * @hidden
     */
    protected _Handle_insert(first: TreeMultiSet.Iterator<T>, last: TreeMultiSet.Iterator<T>): void;
    /**
     * @hidden
     */
    protected _Handle_erase(first: TreeMultiSet.Iterator<T>, last: TreeMultiSet.Iterator<T>): void;
    /**
     * @inheritDoc
     */
    dispatchEvent(event: TreeMultiSetCollection.Event<T>): void;
    /**
     * @inheritDoc
     */
    refresh(): void;
    /**
     * @inheritDoc
     */
    refresh(it: TreeMultiSet.Iterator<T>): void;
    /**
     * @inheritDoc
     */
    refresh(first: TreeMultiSet.Iterator<T>, last: TreeMultiSet.Iterator<T>): void;
    /**
     * @inheritDoc
     */
    hasEventListener(type: CollectionEvent.Type): boolean;
    /**
     * @inheritDoc
     */
    addEventListener(type: CollectionEvent.Type, listener: TreeMultiSetCollection.Listener<T>): void;
    /**
     * @inheritDoc
     */
    removeEventListener(type: CollectionEvent.Type, listener: TreeMultiSetCollection.Listener<T>): void;
}
export declare namespace TreeMultiSetCollection {
    type Event<T> = CollectionEvent<T, TreeMultiSet<T>, TreeMultiSet.Iterator<T>, TreeMultiSet.ReverseIterator<T>>;
    type Listener<T> = CollectionEvent.Listener<T, TreeMultiSet<T>, TreeMultiSet.Iterator<T>, TreeMultiSet.ReverseIterator<T>>;
    const Event: typeof CollectionEvent;
    export import Iterator = TreeMultiSet.Iterator;
    export import ReverseIterator = TreeMultiSet.ReverseIterator;
}
//# sourceMappingURL=TreeMultiSetCollection.d.ts.map