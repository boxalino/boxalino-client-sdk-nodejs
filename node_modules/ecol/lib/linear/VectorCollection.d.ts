import { Vector } from "tstl/container/Vector";
import { IForwardIterator } from "tstl/iterator/IForwardIterator";
import { ICollection } from "../basic/ICollection";
import { CollectionEvent } from "../basic/CollectionEvent";
export declare class ArrayCollection<T> extends Vector<T> implements ICollection<T, Vector<T>, Vector.Iterator<T>, Vector.ReverseIterator<T>> {
    /**
     * @hidden
     */
    private dispatcher_;
    clear(): void;
    /**
     * @inheritdoc
     */
    push(...items: T[]): number;
    /**
     * @inheritdoc
     */
    push_back(val: T): void;
    /**
     * @hidden
     */
    protected _Insert_by_range<U extends T, InputIterator extends IForwardIterator<U, InputIterator>>(pos: Vector.Iterator<T>, first: InputIterator, last: InputIterator): Vector.Iterator<T>;
    /**
     * @inheritdoc
     */
    pop_back(): void;
    /**
     * @hidden
     */
    protected _Erase_by_range(first: Vector.Iterator<T>, last: Vector.Iterator<T>): Vector.Iterator<T>;
    /**
     * @inheritDoc
     */
    set(index: number, val: T): void;
    /**
     * @inheritdoc
     */
    refresh(): void;
    /**
     * @inheritdoc
     */
    refresh(it: Vector.Iterator<T>): void;
    /**
     * @inheritdoc
     */
    refresh(first: Vector.Iterator<T>, last: Vector.Iterator<T>): void;
    /**
     * @inheritdoc
     */
    dispatchEvent(event: ArrayCollection.Event<T>): void;
    /**
     * @hidden
     */
    private _Notify_insert;
    /**
     * @hidden
     */
    private _Notify_erase;
    /**
     * @inheritdoc
     */
    hasEventListener(type: CollectionEvent.Type): boolean;
    /**
     * @inheritdoc
     */
    addEventListener(type: CollectionEvent.Type, listener: ArrayCollection.Listener<T>): void;
    /**
     * @inheritdoc
     */
    removeEventListener(type: CollectionEvent.Type, listener: ArrayCollection.Listener<T>): void;
}
export declare namespace ArrayCollection {
    type Event<T> = CollectionEvent<T, Vector<T>, Vector.Iterator<T>, Vector.ReverseIterator<T>>;
    type Listener<T> = CollectionEvent.Listener<T, Vector<T>, Vector.Iterator<T>, Vector.ReverseIterator<T>>;
    const Event: typeof CollectionEvent;
    export import Iterator = Vector.Iterator;
    export import ReverseIterator = Vector.ReverseIterator;
}
//# sourceMappingURL=VectorCollection.d.ts.map