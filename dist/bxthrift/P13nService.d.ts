//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


declare class P13nServiceClient {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  /**
   * <dl>
   * <dt>@param choiceRequest</dt>
   * <dd>the ChoiceRequest object containing your request</dd>
   * 
   * <dt>@return</dt>
   * <dd>a ChoiceResponse object containing the list of variants</dd>
   * 
   * <dt>@throws P13nServiceException</dt>
   * <dd>an exception containing an error message</dd>
   * </dl>
   */
  choose(choiceRequest: ChoiceRequest): ChoiceResponse;

  /**
   * <dl>
   * <dt>@param choiceRequest</dt>
   * <dd>the ChoiceRequest object containing your request</dd>
   * 
   * <dt>@return</dt>
   * <dd>a ChoiceResponse object containing the list of variants</dd>
   * 
   * <dt>@throws P13nServiceException</dt>
   * <dd>an exception containing an error message</dd>
   * </dl>
   */
  choose(choiceRequest: ChoiceRequest, callback: Function): void;

  chooseAll(bundle: ChoiceRequestBundle): ChoiceResponseBundle;

  chooseAll(bundle: ChoiceRequestBundle, callback: Function): void;

  /**
   * <dl>
   * <dt>@param batchChoiceRequest</dt>
   * <dd>the BatchChoiceRequest object containing your requests</dd>
   * 
   * <dt>@return</dt>
   * <dd>a BatchChoiceResponse object containing the list of variants for each request</dd>
   * 
   * <dt>@throws P13nServiceException</dt>
   * <dd>an exception containing an error message</dd>
   * </dl>
   */
  batchChoose(batchChoiceRequest: BatchChoiceRequest): BatchChoiceResponse;

  /**
   * <dl>
   * <dt>@param batchChoiceRequest</dt>
   * <dd>the BatchChoiceRequest object containing your requests</dd>
   * 
   * <dt>@return</dt>
   * <dd>a BatchChoiceResponse object containing the list of variants for each request</dd>
   * 
   * <dt>@throws P13nServiceException</dt>
   * <dd>an exception containing an error message</dd>
   * </dl>
   */
  batchChoose(batchChoiceRequest: BatchChoiceRequest, callback: Function): void;

  /**
   * <dl>
   * <dt>@param request</dt>
   * <dd>the AutocompleteRequest object containing your request</dd>
   * 
   * <dt>@return</dt>
   * <dd>a AutocompleteResponse object containing the list of hits</dd>
   * 
   * <dt>@throws P13nServiceException</dt>
   * <dd>an exception containing an error message</dd>
   * </dl>
   */
  autocomplete(request: AutocompleteRequest): AutocompleteResponse;

  /**
   * <dl>
   * <dt>@param request</dt>
   * <dd>the AutocompleteRequest object containing your request</dd>
   * 
   * <dt>@return</dt>
   * <dd>a AutocompleteResponse object containing the list of hits</dd>
   * 
   * <dt>@throws P13nServiceException</dt>
   * <dd>an exception containing an error message</dd>
   * </dl>
   */
  autocomplete(request: AutocompleteRequest, callback: Function): void;

  autocompleteAll(bundle: AutocompleteRequestBundle): AutocompleteResponseBundle;

  autocompleteAll(bundle: AutocompleteRequestBundle, callback: Function): void;

  /**
   * Updating a choice or creating a new choice if choiceId is not given in choiceUpdateRequest.
   */
  updateChoice(choiceUpdateRequest: ChoiceUpdateRequest): ChoiceUpdateResponse;

  /**
   * Updating a choice or creating a new choice if choiceId is not given in choiceUpdateRequest.
   */
  updateChoice(choiceUpdateRequest: ChoiceUpdateRequest, callback: Function): void;
}
